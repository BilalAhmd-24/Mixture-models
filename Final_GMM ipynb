{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Gaussian Mixture Model:\n",
    "\n",
    "#Importing Dependecies\n",
    "#for matrix math\n",
    "import numpy as np\n",
    "#For plotting\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style(\"white\")\n",
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "#for normalization + probability density function computation\n",
    "from scipy import stats\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-2.71320643e+00  4.81432466e+00 -2.48606521e-03 -1.23394986e-01\n",
      "  2.11390677e+00  3.93517378e+00  4.27029471e+00  2.99860339e+00\n",
      "  4.73298289e+00  4.95350536e+00  5.36071569e+00  6.50535792e+00\n",
      "  5.01039017e+00  6.88702413e+00  8.84925719e+00  8.54620354e+00\n",
      "  9.93832586e+00  7.30428475e+00  1.32116632e+01  1.21457578e+01]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([-2.71320643e+00,  4.81432466e+00, -2.48606521e-03, -1.23394986e-01,\n",
       "        2.11390677e+00,  3.93517378e+00,  4.27029471e+00,  2.99860339e+00,\n",
       "        4.73298289e+00,  4.95350536e+00,  5.36071569e+00,  6.50535792e+00,\n",
       "        5.01039017e+00,  6.88702413e+00,  8.84925719e+00,  8.54620354e+00,\n",
       "        9.93832586e+00,  7.30428475e+00,  1.32116632e+01,  1.21457578e+01,\n",
       "        8.52796513e+00,  1.06844528e+01,  9.99907185e+00,  9.91681529e+00,\n",
       "        1.09339941e+01,  1.17079205e+01,  1.26380471e+01,  1.15386981e+01,\n",
       "        1.30783187e+01,  1.29772497e+01,  1.43165726e+01,  1.33935014e+01,\n",
       "        1.45526854e+01,  1.21985866e+01,  1.08004980e+01,  1.25698439e+01,\n",
       "        1.11328137e+01,  1.60529244e+01,  1.06195784e+01,  1.76067320e+01,\n",
       "       -1.48571428e+00,  3.94431359e+00, -4.94596557e-04, -1.05731031e-01,\n",
       "        7.43360895e-01,  2.96966981e+00,  1.26384371e+00,  2.65057492e+00,\n",
       "        1.54064101e+00,  8.17407134e-01,  2.10423768e+00,  6.07993187e-01,\n",
       "        4.11405972e+00,  1.04098761e+00,  3.39912755e+00,  8.06984425e+00,\n",
       "        9.81534379e+00,  3.33297834e+00,  1.09144568e+01,  3.05312936e+00])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To make no. randoms\n",
    "np.random.seed(10)\n",
    "\n",
    "#Data_Creation\n",
    "#Creates a data \n",
    "Data = np.linspace(-10,10, num=20)\n",
    "#Create a data cluster 1\n",
    "Data_1= Data*np.random.rand(len(Data))+5\n",
    "print(Data_1)\n",
    "#Creates a data cluster 2\n",
    "Data_2= Data_1*np.random.rand(len(Data_1)) +10\n",
    "#Creates a data cluster 3\n",
    "Data_3= Data_1*np.random.rand(len(Data_1))\n",
    "\n",
    "#Combine the clusters to get random points\n",
    "Data_T = np.stack((Data_1, Data_2,Data_3)).flatten()\n",
    "#print(Data_T)\n",
    "Data_T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b2c8a0128>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Now we have data stored as Data_T coming from 3 sources\n",
    "#Lets visulize our datset\n",
    "#plot histogram\n",
    "sns.distplot(Data_T, bins=20, kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b2c4ece48>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Lets see, Does a simple Normal curve fits this data?\n",
    "sns.distplot(Data_T, fit=stats.norm, bins=20, kde=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Clearly not\n",
    "#Let's assume we have 3 Gaussians and that will fit the data better\n",
    "#Attributes of Gaussian Mixture Model would be:\n",
    "#Cluster Probabilities = pi(pi_1,pi_2,pi_3 which is equal to 1/3 here)\n",
    "#Cluster means = mu_1,mu_2,mu_3\n",
    "#Cluster Variance =var_1,var_2,var_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of Gaussian_1: 0.8422247383826557\n",
      "Sigma of Gaussian_1: 0.20358079732747866\n",
      "Mean of Gaussian_2 4.394703664884535\n",
      "Sigma of Gaussian_2: 2.917458937510429\n",
      "Mean of Gaussian_3 3.88772752880584\n",
      "Sigma of Gaussian_3: 3.63781955285776\n"
     ]
    }
   ],
   "source": [
    "#Initialize the random parameters\n",
    "\n",
    "mu_1=np.random.randn()\n",
    "print(\"Mean of Gaussian_1:\",mu_1)\n",
    "var_1=np.random.randn()\n",
    "print(\"Sigma of Gaussian_1:\",var_1)\n",
    "\n",
    "mu_2=np.random.randn()+2\n",
    "print(\"Mean of Gaussian_2\",mu_2)\n",
    "var_2=np.random.randn()+2\n",
    "print(\"Sigma of Gaussian_2:\",var_2)\n",
    "\n",
    "mu_3=np.random.randn()+4\n",
    "print(\"Mean of Gaussian_3\",mu_3)\n",
    "var_3=np.random.randn()+4\n",
    "print(\"Sigma of Gaussian_3:\",var_3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Instantiate the random gaussians\"\"\"\n",
    "gauss_1 = norm(loc=mu_1,scale=var_1) \n",
    "gauss_2 = norm(loc=mu_2,scale=var_2)\n",
    "gauss_3 = norm(loc=mu_3,scale=var_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensionality = (60, 3)\n"
     ]
    }
   ],
   "source": [
    "#Create the array r with dimensionality nxK to store the pdf for 3 gaussians.\n",
    "r = np.zeros((len(Data_T),3))  \n",
    "print('Dimensionality','=',np.shape(r))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Suppose the data x is coming from gaussian/cluster z:\n",
    "#z is a latent variable, we can only guess it initially\n",
    "#We can define a joint density function as\n",
    "#p(x,z)=p(x|z).p(z)\n",
    "#It could be re-written as\n",
    "#p(x,z)= pi_k*N(x_i|mu_1,var_1)\n",
    "#Where p(x,z denotes the probability of x_i coming from the gaussian z\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[4.08112149e-065 2.49564785e-001 7.50435215e-001]\n",
      " [1.75540602e-082 5.60395408e-001 4.39604592e-001]\n",
      " [3.36999352e-003 4.13593844e-001 5.83036163e-001]\n",
      " [2.52757974e-004 4.08294814e-001 5.91452428e-001]\n",
      " [3.32854316e-008 5.08490374e-001 4.91509592e-001]\n",
      " [6.05014910e-050 5.51900327e-001 4.48099673e-001]\n",
      " [2.13924266e-061 5.56085968e-001 4.43914032e-001]\n",
      " [3.71965032e-024 5.33958393e-001 4.66041607e-001]\n",
      " [3.92156160e-079 5.59946034e-001 4.40053966e-001]\n",
      " [2.25811629e-088 5.61005645e-001 4.38994355e-001]\n",
      " [9.08180471e-107 5.61642089e-001 4.38357911e-001]\n",
      " [9.56659547e-168 5.54250692e-001 4.45749308e-001]\n",
      " [7.72643287e-091 5.61197433e-001 4.38802567e-001]\n",
      " [4.06371230e-191 5.48758774e-001 4.51241226e-001]\n",
      " [0.00000000e+000 4.96274207e-001 5.03725793e-001]\n",
      " [2.17009416e-310 5.07038528e-001 4.92961472e-001]\n",
      " [0.00000000e+000 4.49813621e-001 5.50186379e-001]\n",
      " [2.07905086e-218 5.41006435e-001 4.58993565e-001]\n",
      " [0.00000000e+000 2.57050576e-001 7.42949424e-001]\n",
      " [0.00000000e+000 3.24753105e-001 6.75246895e-001]\n",
      " [6.36451131e-309 5.07655539e-001 4.92344461e-001]\n",
      " [0.00000000e+000 4.11465103e-001 5.88534897e-001]\n",
      " [0.00000000e+000 4.46878346e-001 5.53121654e-001]\n",
      " [0.00000000e+000 4.50844689e-001 5.49155311e-001]\n",
      " [0.00000000e+000 3.97604262e-001 6.02395738e-001]\n",
      " [0.00000000e+000 3.51937929e-001 6.48062071e-001]\n",
      " [0.00000000e+000 2.93550749e-001 7.06449251e-001]\n",
      " [0.00000000e+000 3.62222030e-001 6.37777970e-001]\n",
      " [0.00000000e+000 2.65505306e-001 7.34494694e-001]\n",
      " [0.00000000e+000 2.71932337e-001 7.28067663e-001]\n",
      " [0.00000000e+000 1.89536391e-001 8.10463609e-001]\n",
      " [0.00000000e+000 2.45585814e-001 7.54414186e-001]\n",
      " [0.00000000e+000 1.76047341e-001 8.23952659e-001]\n",
      " [0.00000000e+000 3.21428592e-001 6.78571408e-001]\n",
      " [0.00000000e+000 4.05078675e-001 5.94921325e-001]\n",
      " [0.00000000e+000 2.97895126e-001 7.02104874e-001]\n",
      " [0.00000000e+000 3.86232972e-001 6.13767028e-001]\n",
      " [0.00000000e+000 1.02298570e-001 8.97701430e-001]\n",
      " [0.00000000e+000 4.14988855e-001 5.85011145e-001]\n",
      " [0.00000000e+000 5.10554442e-002 9.48944556e-001]\n",
      " [1.44471494e-027 3.27454206e-001 6.72545794e-001]\n",
      " [3.05488007e-050 5.52030027e-001 4.47969973e-001]\n",
      " [3.50624599e-003 4.13644553e-001 5.82849201e-001]\n",
      " [3.77325195e-004 4.09214209e-001 5.90408466e-001]\n",
      " [9.26599629e-001 3.32430074e-002 4.01573639e-002]\n",
      " [1.66500925e-023 5.33256726e-001 4.66743274e-001]\n",
      " [5.87074537e-001 1.96660235e-001 2.16265228e-001]\n",
      " [6.61438020e-017 5.24929765e-001 4.75070235e-001]\n",
      " [3.04099254e-002 4.72750532e-001 4.96839542e-001]\n",
      " [9.32283100e-001 3.09049681e-002 3.68119322e-002]\n",
      " [4.48190078e-008 5.08166231e-001 4.91833724e-001]\n",
      " [8.84555352e-001 5.15337589e-002 6.39108889e-002]\n",
      " [6.52894878e-056 5.54280292e-001 4.45719708e-001]\n",
      " [8.89357073e-001 5.16243905e-002 5.90185362e-002]\n",
      " [4.59551704e-034 5.42761839e-001 4.57238161e-001]\n",
      " [3.31705056e-273 5.22000036e-001 4.77999964e-001]\n",
      " [0.00000000e+000 4.55649197e-001 5.44350803e-001]\n",
      " [2.59512966e-032 5.41424699e-001 4.58575301e-001]\n",
      " [0.00000000e+000 3.98706453e-001 6.01293547e-001]\n",
      " [2.08973255e-025 5.35256605e-001 4.64743395e-001]]\n",
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
      " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "#Pdf could be very high if the variance is small\n",
    "#it could definitely be greater than 1\n",
    "for c,g in zip(range(3),[gauss_1,gauss_2,gauss_3]):\n",
    "    r[:,c] = g.pdf(Data_T) \n",
    "    \n",
    "#Normalize the probabilities such that each row of r sums to 1\n",
    "for i in range(len(r)):\n",
    "    r[i] = r[i]/np.sum(r,axis=1)[i]\n",
    "print(r)    \n",
    "#To checj that it sums upto 1.\n",
    "print(np.sum(r,axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Instantiate the random pi_c\"\"\"\n",
    "pi = np.array([1/3,1/3,1/3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the data\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "ax0 = fig.add_subplot(111)\n",
    "for i in range(len(r)):\n",
    "    ax0.scatter(Data_T[i],0,c=np.array([r[i][0],r[i][1],r[i][2]]),s=100) # We have defined the first column as red, the second as\n",
    "                                                                # green and the third as blue\n",
    "for g,c in zip([gauss_1.pdf(np.linspace(-15,15)),gauss_2.pdf(np.linspace(-15,15)),gauss_3.pdf(np.linspace(-15,15))],['r','g','b']):\n",
    "    ax0.plot(np.linspace(-10,10),g,c=c,zorder=0)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To estimate parameters, We are using M_L \n",
    "#We are finding parameters for particular instance having max. likelihood  for observed data\n",
    "# To maximmize the function\n",
    "#We take log of M_L\n",
    "#Lof converts the multiplication into addition(basic stuff)\n",
    "#To maximize any function, we usually take double derivative and equates to 0.\n",
    "#and we get"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#E_Step:\n",
    "\n",
    "\n",
    "#Instantiate the random mu_c\"\"\"\n",
    "m = np.array([1/3,1/3,1/3]) # We expect to have three clusters \n",
    "pi = m/np.sum(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.33333333, 0.33333333, 0.33333333])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.33333333, 0.33333333, 0.33333333])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#/Probability for each datapoint x_i to belong to gaussian g \n",
    "#Calcualting Posterior probability\n",
    "for c,g,p in zip(range(3),[gauss_1,gauss_2,gauss_3],pi):\n",
    "    r[:,c] = p*g.pdf(Data_T) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize it over the sum of multiplication of pdf*pi\n",
    "#P(x_i|Gaussian).pi\n",
    "#-divided by----\n",
    "#Σp(x_i|Gaussian).pi\n",
    "\n",
    "for i in range(len(r)):\n",
    "    r[i] = r[i]/(np.sum(pi)*np.sum(r,axis=1)[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.08112149e-065, 2.49564785e-001, 7.50435215e-001],\n",
       "       [1.75540602e-082, 5.60395408e-001, 4.39604592e-001],\n",
       "       [3.36999352e-003, 4.13593844e-001, 5.83036163e-001],\n",
       "       [2.52757974e-004, 4.08294814e-001, 5.91452428e-001],\n",
       "       [3.32854316e-008, 5.08490374e-001, 4.91509592e-001],\n",
       "       [6.05014910e-050, 5.51900327e-001, 4.48099673e-001],\n",
       "       [2.13924266e-061, 5.56085968e-001, 4.43914032e-001],\n",
       "       [3.71965032e-024, 5.33958393e-001, 4.66041607e-001],\n",
       "       [3.92156160e-079, 5.59946034e-001, 4.40053966e-001],\n",
       "       [2.25811629e-088, 5.61005645e-001, 4.38994355e-001],\n",
       "       [9.08180471e-107, 5.61642089e-001, 4.38357911e-001],\n",
       "       [9.56659547e-168, 5.54250692e-001, 4.45749308e-001],\n",
       "       [7.72643287e-091, 5.61197433e-001, 4.38802567e-001],\n",
       "       [4.06371230e-191, 5.48758774e-001, 4.51241226e-001],\n",
       "       [0.00000000e+000, 4.96274207e-001, 5.03725793e-001],\n",
       "       [2.17009416e-310, 5.07038528e-001, 4.92961472e-001],\n",
       "       [0.00000000e+000, 4.49813621e-001, 5.50186379e-001],\n",
       "       [2.07905086e-218, 5.41006435e-001, 4.58993565e-001],\n",
       "       [0.00000000e+000, 2.57050576e-001, 7.42949424e-001],\n",
       "       [0.00000000e+000, 3.24753105e-001, 6.75246895e-001],\n",
       "       [6.36451131e-309, 5.07655539e-001, 4.92344461e-001],\n",
       "       [0.00000000e+000, 4.11465103e-001, 5.88534897e-001],\n",
       "       [0.00000000e+000, 4.46878346e-001, 5.53121654e-001],\n",
       "       [0.00000000e+000, 4.50844689e-001, 5.49155311e-001],\n",
       "       [0.00000000e+000, 3.97604262e-001, 6.02395738e-001],\n",
       "       [0.00000000e+000, 3.51937929e-001, 6.48062071e-001],\n",
       "       [0.00000000e+000, 2.93550749e-001, 7.06449251e-001],\n",
       "       [0.00000000e+000, 3.62222030e-001, 6.37777970e-001],\n",
       "       [0.00000000e+000, 2.65505306e-001, 7.34494694e-001],\n",
       "       [0.00000000e+000, 2.71932337e-001, 7.28067663e-001],\n",
       "       [0.00000000e+000, 1.89536391e-001, 8.10463609e-001],\n",
       "       [0.00000000e+000, 2.45585814e-001, 7.54414186e-001],\n",
       "       [0.00000000e+000, 1.76047341e-001, 8.23952659e-001],\n",
       "       [0.00000000e+000, 3.21428592e-001, 6.78571408e-001],\n",
       "       [0.00000000e+000, 4.05078675e-001, 5.94921325e-001],\n",
       "       [0.00000000e+000, 2.97895126e-001, 7.02104874e-001],\n",
       "       [0.00000000e+000, 3.86232972e-001, 6.13767028e-001],\n",
       "       [0.00000000e+000, 1.02298570e-001, 8.97701430e-001],\n",
       "       [0.00000000e+000, 4.14988855e-001, 5.85011145e-001],\n",
       "       [0.00000000e+000, 5.10554442e-002, 9.48944556e-001],\n",
       "       [1.44471494e-027, 3.27454206e-001, 6.72545794e-001],\n",
       "       [3.05488007e-050, 5.52030027e-001, 4.47969973e-001],\n",
       "       [3.50624599e-003, 4.13644553e-001, 5.82849201e-001],\n",
       "       [3.77325195e-004, 4.09214209e-001, 5.90408466e-001],\n",
       "       [9.26599629e-001, 3.32430074e-002, 4.01573639e-002],\n",
       "       [1.66500925e-023, 5.33256726e-001, 4.66743274e-001],\n",
       "       [5.87074537e-001, 1.96660235e-001, 2.16265228e-001],\n",
       "       [6.61438020e-017, 5.24929765e-001, 4.75070235e-001],\n",
       "       [3.04099254e-002, 4.72750532e-001, 4.96839542e-001],\n",
       "       [9.32283100e-001, 3.09049681e-002, 3.68119322e-002],\n",
       "       [4.48190078e-008, 5.08166231e-001, 4.91833724e-001],\n",
       "       [8.84555352e-001, 5.15337589e-002, 6.39108889e-002],\n",
       "       [6.52894878e-056, 5.54280292e-001, 4.45719708e-001],\n",
       "       [8.89357073e-001, 5.16243905e-002, 5.90185362e-002],\n",
       "       [4.59551704e-034, 5.42761839e-001, 4.57238161e-001],\n",
       "       [3.31705056e-273, 5.22000036e-001, 4.77999964e-001],\n",
       "       [0.00000000e+000, 4.55649197e-001, 5.44350803e-001],\n",
       "       [2.59512966e-032, 5.41424699e-001, 4.58575301e-001],\n",
       "       [0.00000000e+000, 3.98706453e-001, 6.01293547e-001],\n",
       "       [2.08973255e-025, 5.35256605e-001, 4.64743395e-001]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#M-Step\"\"\"\n",
    "#calculate m_c\"\"\"\n",
    "m_c = []\n",
    "for c in range(len(r[0])):\n",
    "    m = np.sum(r[:,c])\n",
    "    m_c.append(m) # For each cluster c, calculate the m_c and add it to the list m_c\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.03195712755567"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#For each cluster c, calculate the fraction of points pi_c which belongs to cluster c\n",
    "#calculate pi_c\"\"\"\n",
    "pi_c = []\n",
    "for m in m_c:\n",
    "    pi_c.append(m/np.sum(m_c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.07096310027695721, 0.39517094759711496, 0.5338659521259278]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi_c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.86974928, 6.43589963, 8.00684588])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculate mu_c\"\"\"\n",
    "#Re-Estimate the Mean using the posteriors\n",
    "mu_c = np.sum(Data_T.reshape(len(Data_T),1)*r,axis=0)/m_c\n",
    "mu_c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate var_c\"\"\"\n",
    "#Re-estimate the variance using the posteriors\n",
    "var_c = []\n",
    "for c in range(len(r[0])):\n",
    "    var_c.append((1/m_c[c])*np.dot(((np.array(r[:,c]).reshape(60,1))*(Data_T.reshape(len(Data_T),1)-mu_c[c])).T,(Data_T.reshape(len(Data_T),1)-mu_c[c])))\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Update the gaussians\"\"\"\n",
    "#Update with new mean and new var\n",
    "\n",
    "gauss_1 = norm(loc=mu_c[0],scale=var_c[0]) \n",
    "gauss_2 = norm(loc=mu_c[1],scale=var_c[1])\n",
    "gauss_3 = norm(loc=mu_c[2],scale=var_c[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8697492777493284\n",
      "[[0.05043331]]\n",
      "6.435899634761657\n",
      "[[18.31412086]]\n",
      "8.006845876464757\n",
      "[[27.8727798]]\n"
     ]
    }
   ],
   "source": [
    "print(mu_c[0])\n",
    "print(var_c[0])\n",
    "\n",
    "print(mu_c[1])\n",
    "print(var_c[1])\n",
    "\n",
    "print(mu_c[2])\n",
    "print(var_c[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the data\"\"\"\n",
    "#plot to check the fraction of Gaussians havinng these data points\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "ax0 = fig.add_subplot(111)\n",
    "for i in range(len(r)):\n",
    "    ax0.scatter(Data_T[i],0,c=np.array([r[i][0],r[i][1],r[i][2]]),s=100) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Update r\n",
    "\n",
    "#Probability for each datapoint x_i to belong to gaussian g \n",
    "\n",
    "# Mind that we use the new pi_c here\n",
    "for c,g,p in zip(range(3),[gauss_1,gauss_2,gauss_3],pi):\n",
    "    r[:,c] = p*g.pdf(Data_T) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00000000e+000, 6.40929406e-003, 4.43085602e-003],\n",
       "       [0.00000000e+000, 7.23269841e-003, 4.73979689e-003],\n",
       "       [2.95073606e-065, 6.82598926e-003, 4.57802624e-003],\n",
       "       [1.64008065e-084, 6.81001653e-003, 4.57228024e-003],\n",
       "       [1.86279856e-132, 7.06170033e-003, 4.66554238e-003],\n",
       "       [0.00000000e+000, 7.19372857e-003, 4.72035548e-003],\n",
       "       [0.00000000e+000, 7.21051797e-003, 4.72831164e-003],\n",
       "       [0.00000000e+000, 7.13433559e-003, 4.69459117e-003],\n",
       "       [0.00000000e+000, 7.22978334e-003, 4.73819264e-003],\n",
       "       [0.00000000e+000, 7.23735786e-003, 4.74244943e-003],\n",
       "       [0.00000000e+000, 7.24860295e-003, 4.74953851e-003],\n",
       "       [0.00000000e+000, 7.26105308e-003, 4.76407277e-003],\n",
       "       [0.00000000e+000, 7.23914273e-003, 4.74349993e-003],\n",
       "       [0.00000000e+000, 7.25890275e-003, 4.76714130e-003],\n",
       "       [0.00000000e+000, 7.19833418e-003, 4.76881168e-003],\n",
       "       [0.00000000e+000, 7.21306013e-003, 4.77009707e-003],\n",
       "       [0.00000000e+000, 7.12953020e-003, 4.75954888e-003],\n",
       "       [0.00000000e+000, 7.25294735e-003, 4.76947487e-003],\n",
       "       [0.00000000e+000, 6.78077485e-003, 4.68852925e-003],\n",
       "       [0.00000000e+000, 6.91664409e-003, 4.71867857e-003],\n",
       "       [0.00000000e+000, 7.21388431e-003, 4.77015644e-003],\n",
       "       [0.00000000e+000, 7.06832937e-003, 4.74902630e-003],\n",
       "       [0.00000000e+000, 7.12496998e-003, 4.75881883e-003],\n",
       "       [0.00000000e+000, 7.13112690e-003, 4.75980201e-003],\n",
       "       [0.00000000e+000, 7.04536828e-003, 4.74475345e-003],\n",
       "       [0.00000000e+000, 6.96639949e-003, 4.72911466e-003],\n",
       "       [0.00000000e+000, 6.85644338e-003, 4.70558518e-003],\n",
       "       [0.00000000e+000, 6.98465580e-003, 4.73284143e-003],\n",
       "       [0.00000000e+000, 6.79888513e-003, 4.69266590e-003],\n",
       "       [0.00000000e+000, 6.81240351e-003, 4.69573213e-003],\n",
       "       [0.00000000e+000, 6.61904109e-003, 4.65029587e-003],\n",
       "       [0.00000000e+000, 6.75557887e-003, 4.68272136e-003],\n",
       "       [0.00000000e+000, 6.58187548e-003, 4.64122024e-003],\n",
       "       [0.00000000e+000, 6.91039772e-003, 4.71734223e-003],\n",
       "       [0.00000000e+000, 7.05780537e-003, 4.74708613e-003],\n",
       "       [0.00000000e+000, 6.86504839e-003, 4.70748464e-003],\n",
       "       [0.00000000e+000, 7.02619391e-003, 4.74107984e-003],\n",
       "       [0.00000000e+000, 6.32594249e-003, 4.57628827e-003],\n",
       "       [0.00000000e+000, 7.07409581e-003, 4.75007541e-003],\n",
       "       [0.00000000e+000, 6.02855946e-003, 4.49624233e-003],\n",
       "       [0.00000000e+000, 6.61266050e-003, 4.50217585e-003],\n",
       "       [0.00000000e+000, 7.19421790e-003, 4.72058134e-003],\n",
       "       [5.83689430e-065, 6.82625017e-003, 4.57812022e-003],\n",
       "       [1.52613262e-081, 6.81236623e-003, 4.57312461e-003],\n",
       "       [1.14110235e-001, 6.91868061e-003, 4.61171225e-003],\n",
       "       [0.00000000e+000, 7.13221156e-003, 4.69371309e-003],\n",
       "       [1.45140575e-013, 6.97725029e-003, 4.63340060e-003],\n",
       "       [4.73108381e-271, 7.10765179e-003, 4.68370521e-003],\n",
       "       [9.88891139e-039, 7.00629453e-003, 4.64431648e-003],\n",
       "       [1.53877655e+000, 6.92732427e-003, 4.61488971e-003],\n",
       "       [2.07124676e-130, 7.06081956e-003, 4.66519993e-003],\n",
       "       [3.72948228e-006, 6.90261487e-003, 4.60582500e-003],\n",
       "       [0.00000000e+000, 7.20298589e-003, 4.72468575e-003],\n",
       "       [8.27413223e-003, 6.95279938e-003, 4.62429919e-003],\n",
       "       [0.00000000e+000, 7.16196661e-003, 4.70624227e-003],\n",
       "       [0.00000000e+000, 7.23226424e-003, 4.77097804e-003],\n",
       "       [0.00000000e+000, 7.13853100e-003, 4.76095801e-003],\n",
       "       [0.00000000e+000, 7.15763180e-003, 4.70438299e-003],\n",
       "       [0.00000000e+000, 7.04721049e-003, 4.74510157e-003],\n",
       "       [0.00000000e+000, 7.13829165e-003, 4.69623264e-003]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize the probabilities such that each row of r sums to 1 and weight it by mu_c == the fraction of points belonging to \n",
    "#cluster c\n",
    "\n",
    "for i in range(len(r)):\n",
    "    r[i] = r[i]/(np.sum(pi_c)*np.sum(r,axis=1)[i])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00000000e+000, 5.91255104e-001, 4.08744896e-001],\n",
       "       [0.00000000e+000, 6.04109522e-001, 3.95890478e-001],\n",
       "       [2.58745357e-063, 5.98560153e-001, 4.01439847e-001],\n",
       "       [1.44090484e-082, 5.98298978e-001, 4.01701022e-001],\n",
       "       [1.58843694e-130, 6.02162034e-001, 3.97837966e-001],\n",
       "       [0.00000000e+000, 6.03800388e-001, 3.96199612e-001],\n",
       "       [0.00000000e+000, 6.03955179e-001, 3.96044821e-001],\n",
       "       [0.00000000e+000, 6.03126195e-001, 3.96873805e-001],\n",
       "       [0.00000000e+000, 6.04094072e-001, 3.95905928e-001],\n",
       "       [0.00000000e+000, 6.04129740e-001, 3.95870260e-001],\n",
       "       [0.00000000e+000, 6.04143815e-001, 3.95856185e-001],\n",
       "       [0.00000000e+000, 6.03823459e-001, 3.96176541e-001],\n",
       "       [0.00000000e+000, 6.04135743e-001, 3.95864257e-001],\n",
       "       [0.00000000e+000, 6.03598550e-001, 3.96401450e-001],\n",
       "       [0.00000000e+000, 6.01508017e-001, 3.98491983e-001],\n",
       "       [0.00000000e+000, 6.01933198e-001, 3.98066802e-001],\n",
       "       [0.00000000e+000, 5.99670517e-001, 4.00329483e-001],\n",
       "       [0.00000000e+000, 6.03285030e-001, 3.96714970e-001],\n",
       "       [0.00000000e+000, 5.91210660e-001, 4.08789340e-001],\n",
       "       [0.00000000e+000, 5.94452281e-001, 4.05547719e-001],\n",
       "       [0.00000000e+000, 6.01957592e-001, 3.98042408e-001],\n",
       "       [0.00000000e+000, 5.98131220e-001, 4.01868780e-001],\n",
       "       [0.00000000e+000, 5.99553736e-001, 4.00446264e-001],\n",
       "       [0.00000000e+000, 5.99711507e-001, 4.00288493e-001],\n",
       "       [0.00000000e+000, 5.97565355e-001, 4.02434645e-001],\n",
       "       [0.00000000e+000, 5.95647134e-001, 4.04352866e-001],\n",
       "       [0.00000000e+000, 5.93013877e-001, 4.06986123e-001],\n",
       "       [0.00000000e+000, 5.96087685e-001, 4.03912315e-001],\n",
       "       [0.00000000e+000, 5.91642078e-001, 4.08357922e-001],\n",
       "       [0.00000000e+000, 5.91964131e-001, 4.08035869e-001],\n",
       "       [0.00000000e+000, 5.87349647e-001, 4.12650353e-001],\n",
       "       [0.00000000e+000, 5.90610382e-001, 4.09389618e-001],\n",
       "       [0.00000000e+000, 5.86458108e-001, 4.13541892e-001],\n",
       "       [0.00000000e+000, 5.94302741e-001, 4.05697259e-001],\n",
       "       [0.00000000e+000, 5.97871261e-001, 4.02128739e-001],\n",
       "       [0.00000000e+000, 5.93219166e-001, 4.06780834e-001],\n",
       "       [0.00000000e+000, 5.97096155e-001, 4.02903845e-001],\n",
       "       [0.00000000e+000, 5.80242946e-001, 4.19757054e-001],\n",
       "       [0.00000000e+000, 5.98274135e-001, 4.01725865e-001],\n",
       "       [0.00000000e+000, 5.72795534e-001, 4.27204466e-001],\n",
       "       [0.00000000e+000, 5.94939979e-001, 4.05060021e-001],\n",
       "       [0.00000000e+000, 6.03805214e-001, 3.96194786e-001],\n",
       "       [5.11812060e-063, 5.98564404e-001, 4.01435596e-001],\n",
       "       [1.34041882e-079, 5.98337509e-001, 4.01662491e-001],\n",
       "       [9.08227195e-001, 5.50672243e-002, 3.67055812e-002],\n",
       "       [0.00000000e+000, 6.03099696e-001, 3.96900304e-001],\n",
       "       [1.25006407e-011, 6.00935327e-001, 3.99064673e-001],\n",
       "       [4.01233192e-269, 6.02784887e-001, 3.97215113e-001],\n",
       "       [8.48789079e-037, 6.01367132e-001, 3.98632868e-001],\n",
       "       [9.92554941e-001, 4.46832254e-003, 2.97673602e-003],\n",
       "       [1.76636817e-128, 6.02149737e-001, 3.97850263e-001],\n",
       "       [3.23959991e-004, 5.99592888e-001, 4.00083152e-001],\n",
       "       [0.00000000e+000, 6.03888681e-001, 3.96111319e-001],\n",
       "       [4.16807014e-001, 3.50245254e-001, 2.32947732e-001],\n",
       "       [0.00000000e+000, 6.03458085e-001, 3.96541915e-001],\n",
       "       [0.00000000e+000, 6.02525890e-001, 3.97474110e-001],\n",
       "       [0.00000000e+000, 5.99902315e-001, 4.00097685e-001],\n",
       "       [0.00000000e+000, 6.03407762e-001, 3.96592238e-001],\n",
       "       [0.00000000e+000, 5.97610583e-001, 4.02389417e-001],\n",
       "       [0.00000000e+000, 6.03175208e-001, 3.96824792e-001]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the data\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "ax0 = fig.add_subplot(111)\n",
    "for i in range(len(r)):\n",
    "    ax0.scatter(Data_T[i],0,c=np.array([r[i][0],r[i][1],r[i][2]]),s=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "\n",
    "\"\"\"Plot the gaussians\"\"\"\n",
    "for g,c in zip([gauss_1.pdf(np.sort(Data_T).reshape(60,1)),gauss_2.pdf(np.sort(Data_T).reshape(60,1)),gauss_3.pdf(np.sort(Data_T).reshape(60,1))],['r','g','b']):\n",
    "    ax0.plot(np.sort(Data_T),g,c=c)\n",
    "        \n",
    "        \n",
    "        \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAp8AAAJnCAYAAADRKTh8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4xLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvDW2N/gAAIABJREFUeJzs3Xl4VPWh//HPZJlMFgKGEBYXFJtAlM1qbWuLSCkWY1CuWlHK1aqIyrVVqFLRp5pif4jUtha5F/UqCmIVUSvV3lbUWnGFYpUgVA0IihuQhISQbWYy8/sjzcQzk8lMMss5Z/J+PY+Pnu+c5TundPz4XR11dXV+AQAAAEmQZnYFAAAA0HcQPgEAAJA0hE8AAAAkDeETAAAASUP4BAAAQNIQPgEAAJA0hE8AAAAkDeETAAAASUP4/Leqqiqzq2BpvJ/weDfh8W7C492Ex7vpHu8nPN5NeFZ6N4RPAAAAJA3hEwAAAElD+AQAAEDSED4BAACQNIRPAAAAJA3hEwAAAElD+AQAAEDSED4BAACQNIRPAAAAJA3hEwAAAElD+AQAAEDSED4BAACQNIRPAAAAJA3hEwAAAElD+AQAAEDSED4BAACQNIRPAAAAJE1U4dPtdmvx4sWaPHmypk6dqtWrV0e8pr6+XlOnTtVzzz1nKF+7dq3Ky8t1xhlnaNGiRWpubu5dzQEAAGA7UYXPZcuWqbKyUsuXL9fChQv10EMPacOGDd1e89vf/la1tbWGspdffln33nuvFixYoP/5n//Rjh07dPfdd/e+9gAAALCViOGzublZ69ev1/z581VaWqqJEydq1qxZWrduXdhr3njjDe3YsUNHHHGEofyxxx7ThRdeqNNPP10nnHCCbrrpJv35z39WU1NT7N8EAAAAlhcxfFZVVcntdmvcuHGBsvHjx2vHjh3yer0h5zc2NmrJkiVauHChMjMzA+VtbW3617/+pZNOOilQNnr0aLW1temDDz6I9XsAAADABiKGz+rqauXn5ysrKytQVlBQII/Ho7q6upDz77nnHn3729/W17/+dUN5Q0ODWltbNWjQoEBZRkaG+vfvr/3798fyHQDA1vx+aePGdL3+err8frNrAwCJlRHphJaWFjmdTkNZx7Hb7TaU//Of/9Rrr72mxx9/POQ+ra2tkmRoDe049ng8YZ9fVVUVqYpxk8xn2RHvJzzeTXi8m/A63s3Spcdo3boiSdKll36ha6/9zMxqWQJ/brrH+wmPdxNest5NcXFxt59HDJ9OpzMkZHYcu1yuQFlLS4v+3//7f/rZz36mvLy8Lu8jKSRoejweQ6tqsEhfIF6qqqqS9iw74v2Ex7sJj3cTXse7aW2V1q/PD5Q//fQQ3X13jhwOEytnMv7cdI/3Ex7vJjwrvZuI3e5FRUVqaGgwhMaamho5nU7l53f+YO7YsUN79+5VRUWFJk6cqIkTJ+rAgQNasmSJ7rjjDvXv319ZWVmqqakJXOP1elVfX6/CwsI4fy0AsIf9+x1yuzuTZkODQ/X1JlYIABIsYstnSUmJMjMzVVlZqZNPPlmStHXrVo0aNUoZGZ2Xn3DCCXrqqacM186ZM0cXX3yxysvLlZaWptLSUr377rs69dRTJUnbtm1Tenq6Ro4cGc/vBAC2ceBAaBvA/v1pGjDAZ0JtACDxIrZ8ulwulZWVaenSpdq+fbs2btyoNWvWaMaMGZLaJyS1tLTI5XLp6KOPNvyVnp6ugoICFRQUSJIuuOAC/eEPf9DLL7+sHTt2aOnSpZo2bZpycnIS+y0BwKL27w/tX++qDABSRcSWT0maN2+elixZorlz5yo3N1ezZ8/WlClTJEllZWW69dZbVV5eHvE+Z555pr744gvdeeedcrvdOuOMM3TdddfF9g0AwMa6CprtraFtya8MACRBVOHT5XKpoqJCFRUVIZ9t3rw57HXBW2tK0qWXXqpLL700+hoCQArrqtt93z5aPgGkrqi21wQAJEbXLZ+ETwCpi/AJACbqeswnP80AUhe/cABgoq6CJhOOAKQywicAmKirLna63QGkMsInAJiIbncAfQ2/cABgErdbqqvrutvd7zehQgCQBIRPADBJuO51t5stNgGkLsInAJiku+71rtb/BIBUwK8bAJiku1ntLDQPIFURPgHAJN2FT1o+AaQqft0AwCTdBUzW+gSQqgifAGCS7ls+CZ8AUhPhEwBM0l3AZK1PAKmKXzcAMMm+feF/gplwBCBVET4BwCTdtXzS7Q4gVRE+AcAk3Y35pNsdQKri1w0ATOD1OnTwYHeLzLPFJoDURPgEABPU1mYYjgsLfcrJ6Uybra1ssQkgNRE+AcAEtbWZhuOiIr8GDTI2dbLQPIBUxC8bAJigpsbY8jlokF9FRT5DGQvNA0hFGZFPAQDEW01NcMunT42NxrDJjHcAqYjwCQAmCO52HzTIr7w8Y7c7M94BpCLCJwCYIDh8Dh4c2vJJtzuAVET4BAATBM92HzTIr9xc4zm0fAJIRYRPADBB6JhPvxobg7vdafkEkHoInwBggtAxnz7l5jLhCEDqI3wCgAmCl1oqKvKrudl4zr59dLsDSD2ETwBIMo9Hqq83tnwWFvrV0hK8yHz7FpsOGkABpBD+sxoAkqy62pgmCwp8ysyU8vKk7GzjFpuHDiW7dgCQWIRPAEiy4IlEgwe3B06HQ2yxCSDl8asGAEkWHCi/GjgHD2aLTQCpjfAJAEkWHCi/uqd7cMsn4RNAqiF8AkCSBQfKrwbOrwbR9nP5mQaQWvhVA4AkCw6URUWd4ZOWTwCpjvAJAEkWvHj8oEGdrZ1fDaLt5/IzDSC18KsGAEkW3PLZMdtd6qrbnZZPAKmF8AkASdaTlk/CJ4BUQ/gEgCQLne3u7/Kf28/lZxpAauFXDQCSyOuVamrCz3b/aiuo1LnFJgCkCsInACRRdbVDfn9n+DziiPatNTv06ye5XJ1ps6XFoYaGZNYQABKL8AkASdRdl7vUvsUmXe8AUhm/aACQRMFLJwUHzfYyZrwDSF2ETwBIou621uwQvNB88Ox4ALAzwicAJFHoMktdtXzS7Q4gdfGLBgBJ1N3Wmp1ldLsDSF2ETwBIouAgGby0kkTLJ4DUxi8aACRRpNnu7WW0fAJIXYRPAEiiaLrdmXAEIJURPgEgiYKDZFez3el2B5DK+EUDgCRpa+t+a80OXXW7s8UmgFRB+ASAJKmpccjn6wyfAwb45HSGnscWmwBSGeETAJIkmslGUvsWm6HjPvm5BpAa+DUDgCQJHrvZVZd7B2a8A0hVGdGc5Ha7ddddd+mll15SZmamZs6cqUsuuaTLc5999lk99NBDOnDggEaOHKl58+bpxBNPlCT5fD5NnDhRra2thmteeukl9evXL8avAgDWFs3Wmh2CgynhE0CqiCp8Llu2TJWVlVq+fLn279+viooKDRkyRGeeeabhvE2bNmnp0qW69dZbVVpaqnXr1um6667T+vXrlZubq88++0xut1vr169XZmZm4Lq8vLz4fisAsKDQme7hWz4HD2bGO4DUFPHXrLm5WevXr9f8+fNVWlqqiRMnatasWVq3bl3IubW1tbryyis1ZcoUHXXUUbryyit16NAh7dq1S5K0e/duDRkyREOHDlVhYWHgL4eD/6IHkPqiWeOzQ/DOR7R8AkgVEVs+q6qq5Ha7NW7cuEDZ+PHjtXLlSnm9XmVkdN7irLPOCvxzS0uLHnvsMRUUFGjEiBGS2sPnMcccE8/6A4BtRLO1ZofgYMpC8wBSRcTwWV1drfz8fGVlZQXKCgoK5PF4VFdXp8LCwpBr3nzzTV1//fWSpEWLFgW61T/66CM1NTVpzpw52rt3b2BM6PDhw+P1fQDAsnrS7R464YhudwCpIWL4bGlpkTNoIbqOY7fb3eU1xcXFeuSRR/TKK69o0aJFGjZsmMaMGaM9e/aoublZN954o3JycrRq1Spdc801euKJJ8KO+6yqqurpd+q1ZD7Ljng/4fFuwuPddNq79wRJnePdW1o+VlVVU5fnut15kkZ95drWPvUu+9J37Q3eT3i8m/CS9W6Ki4u7/Txi+HQ6nSEhs+PY5XJ1eU3HWM6SkhJt27ZNTz/9tMaMGaP7779fPp9P2dnZkqTbb79d06ZN0yuvvKKzzz67V18gXqqqqpL2LDvi/YTHuwmPd2NUX2/8zTz55KN09NHh1vo0tnTW1+f0mXfJn5vu8X7C492EZ6V3E7Efp6ioSA0NDfJ4PIGympoaOZ1O5efnG86trKzUhx9+aCg77rjjVFdXJ0nKysoKBM+O42HDhunAgQMxfQkAsLq2Nqm6Ovpu9+DxoAcOsMUmgNQQMXyWlJQoMzNTlZWVgbKtW7dq1KhRhslGkvTkk0/qvvvuM5S9//77Ou644+T1enX22Wdrw4YNgc+ampq0d+9exnwCSHm1tcatNfv18+orQ+lD5OdLWVmdabO52aHDhxNZQwBIjojh0+VyqaysTEuXLtX27du1ceNGrVmzRjNmzJDUPiGppaVFknTBBRfojTfe0BNPPKFPPvlEK1as0AcffKAZM2YoIyND3/rWt7RixQr985//1K5du3TrrbeqsLBQEyZMSOy3BACTBc90LyjwhDmzHVtsAkhVUf2SzZs3T6WlpZo7d66WLFmi2bNna8qUKZKksrIyvfjii5KksWPHavHixXrqqac0c+ZMbdq0ScuWLdPgwYMlSTfccINOO+003XLLLbrsssskSb///e9DWlABINUEz3QvKPBGvGbwYGPX+759LLcEwP6iSn0ul0sVFRWqqKgI+Wzz5s2G40mTJmnSpEld3ic7O1s33nijbrzxxp7XFABsbN8+43/rDxzokZTe7TVssQkgFdGHAwBJ0NNud6mrheb5yQZgf/ySAUASBAfHgQMjd7uHLjRPyycA+yN8AkAS9KblM3TCEeETgP0RPgEgCUInHEUOn6ETjvjJBmB//JIBQBIE780eTbc7LZ8AUhHhEwCSoDctn8ETjoIDLADYEb9kAJBgPl/vwidbbAJIRYRPAEiw2lqH2to6w2d+vt+wdWY4/fsbt9hsamKLTQD2R/gEgAQLnukevIRSOGyxCSAV8SsGAAkW3OUeHCi7w1qfAFIN4RMAEix4olDwRKLusMUmgFRD+ASABOttt3v7uXS7A0gt/IoBQIIFt3z2pNs9dKF5Wj4B2BvhEwASLJaWTxaaB5BqCJ8AkGDBgbEnYz5ZaB5AquFXDAASLLYJR6ELzQOAnRE+ASDBQpda6v2EI2a7A7A7wicAJFBXW2v2rNs9eJ1PfrYB2Bu/YgCQQAcPOuT1dobPfv38ys6O/vr+/SWnky02AaQOwicAJFBwN3lPutyl9i02WesTQCrhFwwAEig4fA4eHH2Xe4fgwMq4TwB2RvgEgAQKbqXsyQLzHYJbPlloHoCdET4BIIFiWWC+8xq63QGkDn7BACCBQpdZ6k3LJ93uAFIH4RMAEiiWBeY7sMUmgFRC+ASABIp1trvEFpsAUgu/YACQQPFo+aTbHUAqIXwCQAKF7m4Uj5ZPwicA+yJ8AkCC+P2xba3ZeY0xsDLbHYCd8QsGAAlSV+eQx9MZPvPy/MrJ6fl9grfYbGxki00A9kX4BIAEicdkI6l9i83QGe/8fAOwJ369ACBBgnci6k2Xe+e1TDoCkBoInwCQIPHYWrMDk44ApArCJwAkSHBAHDy4d93uEt3uAFIHv14AkCDx2FqzA93uAFIF4RMAEiQeC8yHu5bwCcCuCJ8AkCC1tcaAOHBg77vdCwqM4bO+nvAJwJ4InwCQII2NxoCYn9/7e+XmGsPn4cOETwD2RPgEgARpbDQeBwfInsjLM14bHGwBwC4InwCQIMEBMbbwGXzvXt8KAExF+ASABAnuGo8lfAZfS8snALsifAJAggS3Tga3XvYE4RNAqiB8AkCCxLPlMzi4MuEIgF0RPgEgAdxuye3uDIhpaX65XL2/X2jLp+TvfZYFANMQPgEgAZqajMd5eZIjhsZKp1PKzOxMm16vQ2537+8HAGYhfAJAAsSzyz3cPRj3CcCOCJ8AkADxXGapQ+i4z5hvCQBJR/gEgAQIDZ+x35OWTwCpgPAJAAkQ3CpJtzsAtCN8AkACBAfD4O0xeyO49ZRdjgDYEeETABIgEWM+g+/BWp8A7IjwCQAJENwqGY8xn8Gtp3S7A7AjwicAJEBilloyHhM+AdhRVOHT7XZr8eLFmjx5sqZOnarVq1eHPffZZ5/VeeedpwkTJmj27Nnavn274fMXXngh8PkNN9yg2tra2L4BAFhQYsZ8Bne7x3xLAEi6qMLnsmXLVFlZqeXLl2vhwoV66KGHtGHDhpDzNm3apKVLl+qaa67RY489phNPPFHXXXedGv/d/7Rjxw4tWrRIl19+uVauXKnGxkZVVFTE9QsBgBWw1BIAdC1i+Gxubtb69es1f/58lZaWauLEiZo1a5bWrVsXcm5tba2uvPJKTZkyRUcddZSuvPJKHTp0SLt27ZIkrV27VpMmTVJ5ebmKi4tVUVGht956S3v37o3/NwMAEwWP+YxHyydjPgGkgojhs6qqSm63W+PGjQuUjR8/Xjt27JDX6zWce9ZZZ+mSSy6RJLW0tOixxx5TQUGBRowYIUl67733dNJJJwXOHzx4sIYOHapt27bF5csAgFUkZ8xnzLcEgKTLiHRCdXW18vPzlZWVFSgrKCiQx+NRXV2dCgsLQ6558803df3110uSFi1apLx/7wlXU1MTcn5BQYH2798f05cAAKtJzphPWj4B2E/E8NnS0iKn02ko6zh2u91dXlNcXKxHHnlEr7zyihYtWqRhw4ZpzJgxXd4rMzMz7H2k9pbXZEnms+yI9xMe7ya8vvpuDhwoltQ/cFxX95mqqg4Zzunpuzl0aICkrwWO9+9vVFXVrliqaVl99c9NtHg/4fFuwkvWuykuLu7284jh0+l0hoTDjmOXy9XlNYWFhSosLFRJSYm2bdump59+WmPGjOnyXh6PJ+x9ovkC8VJVVZW0Z9kR7yc83k14ffnd+P3GPvKSkmEqLh4cOO7Nu9m7N/gnOy8l329f/nMTDd5PeLyb8Kz0biKO+SwqKlJDQ4M8Hk+grKamRk6nU/n5+YZzKysr9eGHHxrKjjvuONXV1UmSBg0apJqaGsPnXXXFA4DdJWbMJxOOANhfxPBZUlKizMxMVVZWBsq2bt2qUaNGKSPD+F/hTz75pO677z5D2fvvv6/jjjtOkjR69Ght3bo18Nm+ffv05ZdfavTo0TF9CQCwmtDZ7rHfk/AJIBVEDJ8ul0tlZWVaunSptm/fro0bN2rNmjWaMWOGpPYJSS0tLZKkCy64QG+88YaeeOIJffLJJ1qxYoU++OCDwLnnn3++nn/+eT3zzDPauXOnKioqdNppp+mYY45J4FcEgORLxN7uwZOWmHAEwI6iWmR+3rx5Ki0t1dy5c7VkyRLNnj1bU6ZMkSSVlZXpxRdflCSNHTtWixcv1lNPPaWZM2dq06ZNWrZsmQYPHhz4/Oabb9bKlSt1xRVXKC8vT7fddluCvhoAmCcR4ZOllgCkgogTjqT21s+KiooudyPavHmz4XjSpEmaNGlS2HuVl5ervLy8Z7UEABtpa5OamozhMycn9vvS7Q4gFUTV8gkAiF5Tk/E4N9evtDj82mZnSw5HZwBtaXEoaK8PALA8wicAxFkiutwlyeEInbhE1zsAuyF8AkCcJSp8dnUvJh0BsBvCJwDE2eHDxuPgiUKxYNwnALsjfAJAnCViX/cOoTPeCZ8A7IXwCQBxltxu97jdGgCSgvAJAHEWPAkont3uwa2otHwCsBvCJwDEWSL2dQ93L8InALshfAJAnCV3zGfcbg0ASUH4BIA4Y6klAAiP8AkAccaYTwAIj/AJAHGW2DGfxmO63QHYDeETAOIssWM+afkEYG+ETwCIs0R2uzPmE4DdET4BIM4SOeEoL6/7ZwGA1RE+ASDOkrvOZ9xuDQBJQfgEgDgLHfMZv3sz5hOA3RE+ASDOgvdbZ51PAOhE+ASAOEvumM+43RoAkoLwCQBxltjwSbc7AHsjfAJAHPn9XXW7x+/+jPkEYHeETwCIo+Zmye/vDIRZWX5lZsbv/jk5xuPGRod8vvjdHwASjfAJAHGUyC53SUpPl3JyjPdsaorrIwAgoQifABBHidzdqPOedL0DsC/CJwDEUfDSR/Hc170D4ROAnRE+ASCOEt3t3n5P43HwBCcAsDLCJwDEUejuRvEPnyy3BMDOCJ8AEEeJXGap856ETwD2RfgEgDgyo9udXY4A2AnhEwDiKBnd7uzvDsDOCJ8AEEfJWGqJMZ8A7IzwCQBxFNwKmZxud8InAPsgfAJAHCVnzGdwy2fcHwEACUP4BIA4Ch3zGf9nMOYTgJ0RPgEgjkLHfLLOJwB8FeETAOLInDGfcX8EACQM4RMA4siMpZZo+QRgJ4RPAIijZCy1xJhPAHZG+ASAOErGbPfgSUx0uwOwE8InAMSROUst0fIJwD4InwAQR4cPG4+TsdQS4ROAnRA+ASCOktPtzphPAPZF+ASAOHG7JY+nMwhmZPjldMb/OTk5xuPDhyV//DMuACQE4RMA4iS01VNyJKBR0umUnM7OtOnzOdTSEv/nAEAiED4BIE5Cx3smrjmScZ8A7IrwCQBxkozxnp33Nh4HB18AsCrCJwDESTLDJ/u7A7ArwicAxElw62MidjfqvDfhE4A9ET4BIE7M7HYnfAKwC8InAMRJcABM5oQjxnwCsAvCJwDESfAe64nsdmfMJwC7InwCQJwE7zSU2G53wicAeyJ8AkCcmDvmM2GPAoC4yojmJLfbrbvuuksvvfSSMjMzNXPmTF1yySVdnvvCCy/owQcf1Oeff66jjjpK11xzjSZMmCBJ8vl8mjhxolpbWw3XvPTSS+rXr1+MXwUAzGXumE9aPgHYQ1Thc9myZaqsrNTy5cu1f/9+VVRUaMiQITrzzDMN573zzju67bbbtGDBAp188sl64403tGDBAj388MMaOXKkPvvsM7ndbq1fv16ZmZmB6/Ly8uL7rQDABIz5BIDIIna7Nzc3a/369Zo/f75KS0s1ceJEzZo1S+vWrQs5989//rO+973vafr06Tr66KM1Y8YMnXLKKXrhhRckSbt379aQIUM0dOhQFRYWBv5yJGLzYwBIsuSO+TQe0+0OwC4itnxWVVXJ7XZr3LhxgbLx48dr5cqV8nq9ysjovMWFF15oOO7gdrsltYfPY445Jh71BgDLSe6YT1o+AdhTxJbP6upq5efnKysrK1BWUFAgj8ejuro6w7klJSUaMWJE4HjXrl3asmWLTjrpJEnSRx99pKamJs2ZM0dnnXWWrr/+en388cfx+i4AYKrg1sdEjihizCcAu4rY8tnS0iKn02ko6zjuaNHsSm1trRYsWKDx48dr4sSJkqQ9e/aoublZN954o3JycrRq1Spdc801euKJJ8KO+6yqqor6y8Qqmc+yI95PeLyb8PrSu6muHiWpczz7wYN7VVUVfvX3WN5NfX2+pJLA8YEDzSn1rlPpuyQC7yc83k14yXo3xcXF3X4eMXw6nc6QkNlx7HK5urxm3759+ulPf6r09HTdcccdSktrb2C9//775fP5lJ2dLUm6/fbbNW3aNL3yyis6++yze/UF4qWqqippz7Ij3k94vJvw+tq7aWvLNhyPHHmkiot9XZ4b67s5eDDdcOz356TMu+5rf256ivcTHu8mPCu9m4jd7kVFRWpoaJDH4wmU1dTUyOl0Kj8/P+T8zz77THPmzJEkrVixQgMGDAh8lpWVFQieHcfDhg3TgQMHYvoSAGAFwV3fyex2Z8wnALuIGD5LSkqUmZmpysrKQNnWrVs1atSokMlF9fX1uvbaa5WXl6f77rtPAwcODHzm9Xp19tlna8OGDYGypqYm7d27V8OHD4/HdwEAU4UutcQ6nwAQLGK3u8vlUllZmZYuXapbb71VNTU1WrNmjW6++WZJ7ROS8vLy5HK5tGLFCtXV1enOO++U1+tVdXV14B55eXn61re+pRUrVqiwsFD9+/cP/HPHIvQAYGfJXGQ+uFWVpZYA2EVUi8zPmzdPS5Ys0dy5c5Wbm6vZs2drypQpkqSysjLdeuutKi8v10svvaTGxkbNmjXLcP3UqVO1aNEi3XDDDVq+fLluueUWNTY26tRTT9Xvf//7LpdnAgA78XqllpbO8Olw+JWd3c0FMWKReQB2FVXqc7lcqqioUEVFRchnmzdvDvxzx2Ly4WRnZ+vGG2/UjTfe2LNaAoDFdbXMUiL3z8jKktLT/Wpra3+I2+2Q2y0FLU4CAJYTccwnACCyZC4wL7UH2+BdjpqaEvpIAIgLwicAxEGyw6cU2vXOpCMAdkD4BIA4CJ3pnvhnstwSADsifAJAHAS3Oiaj5ZPwCcCOCJ8AEAfJXGapQ3Dr6uHwO3kCgGUQPgEgDqww5pOWTwB2QPgEgDgIbnVkzCcAdI3wCQBxYEbLZ3DAZZcjAHZA+ASAODBnzCdLLQGwH8InAMSBGUstMeYTgB0RPgEgDsxZasl4TPgEYAeETwCIA3PGfAa3fCb8kQAQM8InAMRB6JjPxD+TMZ8A7IjwCQBxEDrmk3U+AaArhE8AiAOWWgKA6BA+ASAO2NsdAKJD+ASAOAhudWTMJwB0jfAJAHFgzt7uxmPCJwA7IHwCQByw1BIARIfwCQAx8vnM2eGIMZ8A7IjwCQAxam6W/P7O4Jed7Vd6euKfm5MTXA+H2toS/1wAiAXhEwBiZEaXuySlpdH1DsB+CJ8AEKPQ8Jm8Z9P1DsBuCJ8AEKPDh43HyWr57OpZhE8AVkf4BIAYhe7rnszwaTwODsIAYDWETwCIkVljPiX2dwdgP4RPAIhRaLd78p5NtzsAuyF8AkCMzGz5DA66hE8AVkf4BIAYmTvmM3h/96Q9GgB6hfAJADEyY3ejDoz5BGA3hE8AiNHhw2Z2uxM+AdgL4RMAYmStMZ9JezQA9ArhEwBiZK0xn7R8ArA2wicAxMjMpZYY8wnAbgifABAjK+1wRLc7AKsjfAJAjJhwBADRI3wCQIyCWxvz8pL3bMZ8ArAbwicAxMjcvd27rwsAWA3hEwBiZO5SS8Hd7kl7NAD0CuGOuFBDAAAgAElEQVQTAGIU3NVt5lJLtHwCsDrCJwDEwO8PbW3MyUne8wmfAOyG8AkAMWhtldraOgOf0+mX05m85weP+Tx8uD0QA4BVET4BIAZmjveUpIwMyeXqfKbf71Bzc1KrAAA9QvgEgBiYubtR5zPpegdgH4RPAIiBmbsbdWCXIwB2QvgEgBiY3e0uhQZeFpoHYGWETwCIQXArI93uANA9wicAxMDMfd3DPZPwCcDKCJ8AEAMrjvkMngQFAFZC+ASAGFhhzCctnwDshPAJADGwwpjP4NZWwicAKyN8AkAMrDHm03jMUksArIzwCQAxsMaYT5ZaAmAfUYVPt9utxYsXa/LkyZo6dapWr14d9twXXnhBF110kU4//XTNnDlTr776asjn5513niZMmKAbbrhBtbW1sX0DADCRFbrdGfMJwE6iCp/Lli1TZWWlli9froULF+qhhx7Shg0bQs575513dNttt+miiy7So48+qnPPPVcLFizQBx98IEnasWOHFi1apMsvv1wrV65UY2OjKioq4vqFACCZrDDhKC/PeEz4BGBlEcNnc3Oz1q9fr/nz56u0tFQTJ07UrFmztG7dupBz//znP+t73/uepk+frqOPPlozZszQKaecohdeeEGStHbtWk2aNEnl5eUqLi5WRUWF3nrrLe3duzf+3wwAksAaYz6DWz6TXgUAiFrE8FlVVSW3261x48YFysaPH68dO3bI6/Uazr3wwgt1+eWXh9zD7XZLkt577z2ddNJJgfLBgwdr6NCh2rZtW6+/AACYKXTMZ/LrwJhPAHYSMXxWV1crPz9fWVlZgbKCggJ5PB7V1dUZzi0pKdGIESMCx7t27dKWLVsCgbOmpkaFhYWGawoKCrR///6YvgQAmCV0zCd7uwNAdzIindDS0iKn02ko6zjuaNHsSm1trRYsWKDx48dr4sSJYe+VmZnZ7X2qqqoiVTFukvksO+L9hMe7CS/V301t7Yn66k9pTc3HqqpqjuraeL2b2tpcSaVfqUOr7d+73eufaLyf8Hg34SXr3RQXF3f7ecTw6XQ6Q8Jhx7HL5erymn379umnP/2p0tPTdccddygtLS3svTweT9j7RPMF4qWqqippz7Ij3k94vJvw+sK78XiyDMelpUfr2GMjt37G8914vcZOrLY2l63fe1/4cxML3k94vJvwrPRuIna7FxUVqaGhQR6PJ1BWU1Mjp9Op/Pz8kPM/++wzzZkzR5K0YsUKDRgwIPDZoEGDVFNTYzi/q654ALCL4G53K4z5ZLY7ACuLGD5LSkqUmZmpysrKQNnWrVs1atQoZWQYG07r6+t17bXXKi8vT/fdd58GDhxo+Hz06NHaunVr4Hjfvn368ssvNXr06Fi/BwCYwopLLTHmE4CVRQyfLpdLZWVlWrp0qbZv366NGzdqzZo1mjFjhqT2CUktLS2S2ls66+rqdNttt8nr9aq6ulrV1dU6fPiwJOn888/X888/r2eeeUY7d+5URUWFTjvtNB1zzDEJ/IoAkBgej9Ta2hn00tL86mYUUcJ0tdSSP/kZGACiEnHMpyTNmzdPS5Ys0dy5c5Wbm6vZs2drypQpkqSysjLdeuutKi8v10svvaTGxkbNmjXLcP3UqVO1aNEijR07VjfffLPuv/9+1dfX69RTT9XNN98c/28FAEnQVZe7w4RGR6dTysjwy+ttf7jX65DbLWVlRbgQAEwQVfh0uVyqqKjocjeizZs3B/65YzH57pSXl6u8vDz6GgKARVmhy11qD7y5uVJ9fWdZY6NDWVk0fwKwnqi21wQAhLJK+JS6WuvTpIoAQASETwDopdDwaVJFxIx3APZB+ASAXgpuXTSz5ZPwCcAuCJ8A0Euh+7qbGT6Nx8GToQDAKgifANBLVhrzGfxs1voEYFWETwDoJSvsbtT5bLrdAdgD4RMAeim4ddHclk/jMeETgFURPgGgl6w15pOllgDYA+ETAHoptOXTpIqI2e4A7IPwCQC9FDzm00qLzBM+AVgV4RMAesnaYz7NqQcAREL4BIBesvaYT1o+AVgT4RMAeim0292cerQ/m253APZA+ASAXrLSIvPBa4zS7Q7AqgifANBL1hrzScsnAHsgfAJAL1lphyPCJwC7IHwCQC9ZududCUcArIrwCQC9ZKXwGdryaVJFACACwicA9EJbm9TUZAyfOTkmVUZ0uwOwD8InAPRCU5PxODfXrzQTf1GzsyWHozOAtrQ45PWaVx8ACIfwCQC9YKUud0lKS2OXIwD2QPgEgF6wWviU2N8dgD0QPgGgFw4fNh6bubtRZx0InwCsj/AJAL1gpX3dO9DtDsAOCJ8A0AtW7HYPrgNrfQKwIsInAPRCcKuiFbrdGfMJwA4InwDQC1ba1z1cHQifAKyI8AkAvWCHMZ/Bk6IAwAoInwDQC3YY80nLJwArInwCQC8w5hMAeofwCQC9YM0xn8ZjlloCYEWETwDoBWuO+WSpJQDWR/gEgF6wYrc74ROAHRA+AaAXrDjhKC/PeMyYTwBWRPgEgF6w5pjP4AlHJlUEALpB+ASAXggd82lSRb6CpZYA2AHhEwB6IXTMp/VaPhnzCcCKCJ8A0Av2GPNpTj0AoDuETwDoBSuGT7rdAdgB4RMAesjvD9033YpLLRE+AVgR4RMAeqilRfL5OoNdVpZfmZkmVujfQnc4csjnM6cuABAO4RMAesiKuxtJUnq6lJ1trEtTk0mVAYAwCJ8A0ENW7HLvQNc7AKsjfAJAD1m15VPquusdAKyE8AkAPWTFme4dQtf6NKkiABAG4RMAesjK4TO4FZaWTwBWQ/gEgB5qaDAe5+SYU4+uBAfhhgbCJwBrIXwCQA/V1xsDXf/+1mn5HDDAWJfgugKA2QifANBDdXXGQBcc+MwUXJeDBwmfAKyF8AkAPRQcPo84wjrhM7guwXUFALMRPgGgh4JbE2n5BIDoET4BoIes3PIZHD5p+QRgNYRPAOghWj4BoPeiCp9ut1uLFy/W5MmTNXXqVK1evTriNe+++66mTZsWUn7++efr1FNPNfz14Ycf9rzmAGASO7V8MtsdgNVkRHPSsmXLVFlZqeXLl2v//v2qqKjQkCFDdOaZZ3Z5/s6dO3XTTTcpI8N4e7fbrc8//1wPPPCAhg0bFigfMGBADF8BAJLLyi2fTDgCYHURWz6bm5u1fv16zZ8/X6WlpZo4caJmzZqldevWdXn+008/rdmzZ6ugoCDks48//liSdMIJJ6iwsDDwV3BIBQArs1PLJ93uAKwmYvisqqqS2+3WuHHjAmXjx4/Xjh075PV6Q87fvHmzbrvtNs2cOTPks927d+vII48kbAKwLZ/P2ovM0/IJwOoihs/q6mrl5+crKysrUFZQUCCPx6O6urqQ85csWaJJkyZ1ea/du3crPT1d1113naZOnaqrrrpK7733XgzVB4DkOnRI8vs7A11+vl9W+u/p3FwpI6MzgLa0ONTcbGKFACBIxJ/MlpYWOZ1OQ1nHsdvt7tHDdu/erUOHDunaa6/VoEGD9Mwzz2ju3Ll6/PHHDWNAv6qqqqpHz4hFMp9lR7yf8Hg34aXau/n00yxJYwLHubnuXn/HRL2b/Pxxqq3NDBy/884eDRrkScizEiXV/tzEG+8nPN5NeMl6N8XFxd1+HjF8Op3OkJDZcexyuXpUmV/96ldqaWlRXl6eJOnnP/+5Kisr9X//93+aPXt2l9dE+gLxUlVVlbRn2RHvJzzeTXip+G4OH043HBcWZvTqOyby3QwcmKba2s7jAQNGqLjYl5BnJUIq/rmJJ95PeLyb8Kz0biJ2uxcVFamhoUEeT+d/NdfU1MjpdCo/P79HD8vIyAgET0lyOBwaPny4Dhw40KP7AIBZgifwWGmyUQfGfQKwsojhs6SkRJmZmaqsrAyUbd26VaNGjerxxKEf//jHWrVqVeDY5/Np586dGj58eI/uAwBmCQ5yVlpmqQMz3gFYWcTw6XK5VFZWpqVLl2r79u3auHGj1qxZoxkzZkhqn5DU0tIS1cO++93vas2aNXr99df18ccf684779ShQ4d0zjnnxPYtACBJ7NDyyRabAKwsqqbLefPmacmSJZo7d65yc3M1e/ZsTZkyRZJUVlamW2+9VeXl5RHvc9lll8nn82nJkiWqq6vT6NGj9d///d+GrngAsDJaPgEgNlGFT5fLpYqKClVUVIR8tnnz5i6vKS8vDwmk6enpmjNnjubMmdPzmgKABYS2fFpvIg9jPgFYWVR7uwMA2tmx5ZPwCcBKCJ8A0AN2GPNJyycAKyN8AkAP0PIJALEhfAJAD9ghfAa3fDLhCICVED4BoAfsED5p+QRgZYRPAOiB4CBnhzGftHwCsBLCJwBEye2WGhs7g1x6ul/9+plYoTC6avn0WW9FKAB9FOETAKLUVZe7w4KNik6nlJPTGUB9PocaGkysEAB8BeETAKIU3H1txfGeHVhuCYBVET4BIEp2GO/ZoX9/xn0CsCbCJwBEyc4tn/X1hE8A1kD4BIAo2anlMzgY0/IJwCoInwAQJTu3fDLmE4BVED4BIEp2WGC+Q2jLJz/3AKwhw+wKAIBd0PIJmO+w+7DqW+vV7G1Wk6dJzd5mNXub1ehp1O7PduvN1jfV7G1WhiND5V8r1+DcwWZXGUEInwAQJTuP+SR8wu6aPE269oVr9fSHT0d9za/e/JUeKX9E3z3quwmsGXqKfhgAiJKdut3ZYhOppK6lTuf98bweBU9JOthyUP/x9H/o0e2PJqhm6A3CJwBEiZZPIPm+bPxSZz95tt76/K1eXe/xefRfL/yXbn/9dvn87DNrBXS7A0CU7Dzmk5ZP2NGe+j2a/vR07anfYyjPd+arMKdQ2RnZysnIUXZmtnIyc9TW3KaiI4rU2taqJz940nDNb/7xG+2s26l7f3CvsjOyk/gtEIzwCQBRouUTSJ7t1dt13tPnaV/TPkP5t4d9W4+d85gGuAaEXFNVVaXi4mJJ0tnHn61rnr9GLW0tgc/XV63Xp4c+1R/O+QMTkUxEtzsARMHvt1vLp7F7kfAJO9n0+SaVrSsLCZ4/OO4Heuo/nuoyeAb7j5L/0HMXPKdBOYMM5W/ve1uTH5+s7dXb41pnRI/wCQBRaGyUvN7OAJed7ZfLZWKFIsjPlxyOznDc0OCQx2NihYAovbjnRU1/errqW+sN5ReOulBrytcoJzMn6nudMvQUvTjjRZUOLDWUf9rwqaY+MVUv7H4hLnVGzxA+ASAKdmr1lKS0NKl/f/Z3h708+f6TuuhPF6nZ22wov2r8Vbr3B/cqMz2zx/cc3n+4nr/weX1/+PcN5Q3uBs340wzd/+79MdUZPUf4BIAo2Gm8ZwfGfcJOHtj6gK7865Xy+ryG8pu/fbOWTFyiNEfvI0t+Vr4eP/dxXTnuSkO5z+/Tgr8v0F2b7+r1vdFzhE8AiEJwy2dwq6IVhW6xSfiENd37zr264eUb5Ffnn1mHHPr1pF9rwTcXyOGI/c9uRlqGfj3p17rzjDtDguwdb96hbQe2xfwMRIfwCQBRsNMC8x3YYhN2sOvgLt362q2Gsoy0DP3v1P8NaamMh6vGX6XHznlMeZl5gbI2f5vmvzSfdUCThPAJAFFIhW53Wj5hNX6/Xwv+vkDuNnegLDsjW4+f87guGHVBwp77g+N+oPunGsd6/uPLf2jVtlUJeyY6ET4BIAq0fALx99yu5/TSxy8ZypZ9f5m+f+z3w1wRP2XHl+ns4882lFW8XqH9jfsT/uy+jvAJAFEIbjW0Y8sn4RNW0uRp0sJXFhrKvnPkd3TByMS1eAa784w7lZuZGziub63XLRtvSdrz+yrCJwBEIRVaPul2h5X89h+/1acNnwaO0x3p+vWkX8dlclG0jup3lBZ+2xiA132wTn//5O9Jq0NfRPgEgCjYseUzeEY+LZ+wio/qPtKyt5cZyq4+6WqdUHhC0uty9firNbpwtKHsZ3/7mVq8LWGuQKwInwAQBVo+gfjw+/266e83GSYZDc4ZrJ9/8+em1CcjLUN3T75bDnX+/2NX3S797h+/M6U+fQHhEwCicPCg8efSDi2fwQGZHY5gBX/56C/asGeDoez2029Xfla+STVq34bz8rGXG8p+t+V3qqqtMqlGqY3wCQBRoOUTiF2zt1k3vXKToey0I0/TD0f+0KQadfrFab9QUU5R4Njd5tbPXv6Z/H7r/3/dbgifABAFO475ZLY7rOZ3//idPjn0SeDYjElG4QxwDdDi0xcbyjbu3agn3n/CpBqlLsInAETQ1iYdOmS/7TVp+YSV7K7brd9v+b2h7MpxV+rEwhNNqlGo80eerzOOOcNQdsvGW1TXUmdOhVIU4RMAIggeK5mf71d6ukmV6YGcHCkzszOAtrY61NxsYoXQp930yk1qbWsNHBflFIUsc2Q2h8Oh30z6jbLSswJl1c3VqnitwrQ6pSLCJwBEYMfxnpLkcND6CWv460d/1fO7nzeU/fK7v1T/rP4m1Si84484XvO/Md9Q9vB7D2vT55tMqlHqIXwCQAR2HO/ZgXGfMFuzt1k//7txGaVvDfuWLiq9yKQaRXb9Kdfra0d8zVA272/z5GnzmFSj1EL4BIAI7NryKdHyCfP9fsvv9fGhjwPHaY40y0wyCicrI0u//d5vDWU7qndo5baVJtUotRA+ASCC0JZPn0k16TlaPmGmPfV7dPc/7jaUzR43W2MGjTGpRtE7/ejTNaN0hqHsnrfvofUzDgifABCBnVs+2WITZlry1hK1tHVuUzkoZ5Bu/tbNJtaoZ27/7u1ypbsCx582fKonP3jSxBqlBsInAERg5zGfdLvDLJ81fBYS1G77zm0a4BpgUo16rii3SD868UeGsmVvL2Ph+RgRPgEgAju3fNLtDrPc++698vq8gePjBxyvi0svNrFGvfOTk3+iNEdnXPpXzb9CtgdFzxA+ASCCVGr5JHwiGepb6/XwtocNZdd+/Vqlp9lggdwgx/Y/VtOLpxvK7t5yd5izEQ3CJwBEEBzY7LC7UQdaPmGGVdtWqcHdEDguzC7URSdYd2mlSK475TrD8ZufvanNn282qTb2R/gEgAiCA5udWz4Z84lEc7e5de+79xrK5oyfo+yMbJNqFLtxReM06ZhJhjJaP3uP8AkAETDmE4jekx88qc8Pfx44zsnI0eyxs02sUXxcf8r1huP/++j/9EHtBybVxt4InwAQAS2fQHT8fr+Wv73cUPajE3+kguwCk2oUP6cffbrGF403lC3bssyk2tgb4RMAIggObLR8Al17cc+L2lGzI3Cc5kjTf339v0ysUfw4HI6Q1s8n3n9CnzV8ZlKN7IvwCQDdaGmRmps7A1tGhl95eSZWqIe6Cp8++2zQBJtZ9raxJfDcr52rY/sfa05lEmDa16bpuP7HBY49Pk/I+FZERvgEgG50Nd7TwltSh3A6pdzczgDq8znU0NDNBUAvvbvvXb366auGsp+e8lOTapMY6Wnp+snJPzGUPbztYdW11JlUI3sifAJAN+w83rMD4z6RDMGtnt896rs6afBJJtUmcS4+4WINyhkUOG5wN2hl5UoTa2Q/UYVPt9utxYsXa/LkyZo6dapWr14d8Zp3331X06ZNCynfsmWLZs6cqQkTJujqq6/W3r17e15rAEgSO4/37MD+7ki0PfV79EzVM4ayn56cWq2eHbIzsnX1+KsNZfe+e69avC1hrkCwqMLnsmXLVFlZqeXLl2vhwoV66KGHtGFD+K2ldu7cqZtuuilk79N9+/bphhtu0NSpU7Vq1SoNHDhQN9xwg3wMQAJgUXZeZqkDuxwh0f7nnf+Rz9/57/LSgaWacuwUE2uUWFeMvUJ5mZ2Dv/c37ddjOx4zsUb2EjF8Njc3a/369Zo/f75KS0s1ceJEzZo1S+vWrevy/KefflqzZ89WQUHosgrPPPOMiouLdckll2jEiBH6xS9+of3792vLli2xfxMASAA7b63ZgRnvSKTa5lqteW+Noezar18rh50GR/fQANcA/XjMjw1l9/zzHrX52sypkM1EDJ9VVVVyu90aN25coGz8+PHasWOHvF5vyPmbN2/WbbfdppkzZ4Z89t577+mkkzrHf7hcLo0cOVLbtm3rbf0BIKHsvLVmB1o+kUgPVj6oJm9T4Hho7lD9cNQPTaxRclxz0jXKTMsMHH9U95Ge3fmsiTWyj4jhs7q6Wvn5+crKygqUFRQUyOPxqK4udHbXkiVLNGnSpJDyjnsVFhYaygoKCrR///6e1hsAkiIVWz4PHmSuKeKjxdui+7febyi7+qSr5Ux3mlSj5Dmy35EhIfvuLXeHDDlEqIi/QC0tLXI6jX+IOo7dbnePHtbVvTIzM3t8HwBIllQY80m3OxLl8X89rgNNBwLH/Zz9QrqjU9l1p1xnOH53/7va+OlGk2pjHxmRTnA6nSHhsOPY5XL16GFd3cvj8ah///5hr6mqqurRM2KRzGfZEe8nPN5NeHZ/N598cpykzp4ft/tLVVXVxOXeyXo3Hs8gScMDx3v2HFJV1cdJeXZv2f3PTaJZ4f34/D799q3fGsrOOfIc7f9kv/bLvB7NZL6bNKXp9MGna+O+zsB5xyt3aNg3hyWtDj2RrHdTXFzc7ecRw2dRUZEaGhrk8XiUmdk+tqGmpkZOp1P5+fk9qkxRUZFqaow/2jU1NTr++OPDXhPpC8RLVVVV0p5lR7yf8Hg34aXCu/H5cgzHI0cWqbg49n2qk/luSkoyDcd+/wAVF1u3WzQV/twkklXez3M7n9MnjZ8EjjPSMrTwewt1VL+jTKuTGe/mltxbtPGJzvD5VvVbah3QqtGDRie1HpFY5c+NFEW3e0lJiTIzM1VZWRko27p1q0aNGqWMjIjZ1WD06NHaunVr4LilpUUffvihRo+21v9AANAhFcZ8ssg8EuGet+8xHJ8/8nxTg6dZvjnsm/r2sG8bylh0vnsRw6fL5VJZWZmWLl2q7du3a+PGjVqzZo1mzJghqX0SUUtLdAurTps2Tdu3b9fKlSv10Ucf6Ve/+pUGDx6sb3zjG7F9CwBIEMZ8AqG2fLFFm77YZCj7ydd/Eubs1Hf1ScZF59e+v1aHWg+ZVBvri2rK47x581RaWqq5c+dqyZIlmj17tqZMaV88tqysTC+++GJUDxs2bJjuvPNO/eUvf9Gll16qmpoa3XXXXUpLY+YlAGtKjZZP40YetHwiVg9UPmA4njx8suW6mZOpbESZhuYODRw3ehq19v21JtbI2qLqN3e5XKqoqFBFRUXIZ5s3b+7ymvLycpWXl4eUn3baaTrttNN6VksAMIHfn5otn/X1hE/0Xm1zrf744R8NZVeNv8qk2lhDZnqmLh1zqZa8tSRQ9uDWBzV77OyUXmy/t2hyBIAwGhqktrbOf3Hk5Pj1lSWPbSM/X3I4OgNoQ4NDHo+JFYKtPbrjUbW2tQaOh+cP1+Thk02skTVcMvoSpTvSA8fv176v1z973cQaWRfhEwDCSIVWT0lKSwvdmYnWT/SGz+8LmUxz2ZjLlJ6WHuaKvmNY3jCdffzZhrIHtz5oUm2sjfAJAGEEj420a/iUmPGO+Hj545e1u3534NiZ7tSsE2eZWCNruWLcFYbjZ3c9qy8bvzSpNtZF+ASAMFKl5VNixjvi48FKY0ve9OLpKswpDHN233P6Uaer+IjOtTS9Pq9Wv7faxBpZE+ETAMIIDmh2nOneIbjuhE/01N5De/XX3X81lF0x9oowZ/dNDocj5J08vO1heX1ek2pkTYRPAAgjlVs+6XZHT616b5V8/s5lu04sPFGnDj3VxBpZ00WlFykno3NntM8Pf66/fvTXbq7oewifABBGKqzx2YGWT8TC3eYO6T5mGaGuDXAN0A9H/dBQFjxcoa8jfAJAGLR8Au3+vOvP2t+0P3Dcz9kvJGChU3DX+8ufvKydB3eaVBvrIXwCQBgHDxp/Iu3c8smEI8Tiga3GHY0uKr1Iec48k2pjfWOLxoYMSWC/906ETwAIg5ZPQHq/JnSx9MvHXm5SbewjuPXz0R2PqsnTZFJtrIXwCQBhMOYTCB2veNqRp6l0YKlJtbGPc4vP1cDsgYHj+tZ6PfXhUybWyDoInwAQRiq3fBI+EY3D7sNa+6+1hjKWV4qOK8OlWScYF+B/YOsD8vvt+zsSL4RPAAgjlVo+CZ/ojSc/eFKH3IcCx4NyBmna16aZWCN7uWzsZXKo8/9rW/dv1T/3/dPEGlkD4RMAwgje/9zOLZ9sr4me8vv9IV3ul5x4iZzpTpNqZD/H9j9WU46dYigLnrzVFxE+AaALXq906FBnQHM4/MrPt2/47Krlk94/dOcfX/xD2w5sCxynOdJ06ZhLTayRPQXv9/70h0+rtrnWpNpYA+ETALoQ3OqZny+lp5tUmTjIyZGczs602drqUHOziRWC5T24zdjqeeZxZ+qY/GNMqo19fX/49w3vrbWtVY/ueNTEGpmP8AkAXQgd7+kLc6Y9OByM+0T0appr9McP/2gomz12tkm1sbf0tHRdPsa4NNXKypWGrUr7GsIn7MHrlaO2Vo5PPpGaWCcNiZdKM907sNwSovXo9kflbnMHjo/tf6y+N/x7JtbI3madOMswVnZ3/W69/PHLJtbIXBlmVwB9XGur0v/xD2W8+aYcX34pR329HIcOGf9eXy9HY6PhMt+QIfIdd5x8xx5r/Ptxx8k/cGB7Mw8Qg+CWz1QInyw0j2j4/D6t3GbcjefyMZcrzUF7VW8V5hRqevF0PfH+E4Gy/638X00+drKJtTIP4RPJ5XYr/e23lfHqq8p47TWlb94sR0tLj2+T9uWXSvvyS+nNN0M+8/frp7bjj5d38mR5pk2Tb9w4wih6LLhV0M7LLHWg2x3R+NvHf9Oe+j2B46z0LP3oxB+ZV6EUMXvsbEP43LB7gz459EmfHEdL+ERieb1Kf+cdZbz6qtJffVUZmzbJkeBuc0dDgzLefVcZ774r129+I9/w4Y9+yIEAACAASURBVPKcc44855yjtpNPltL4r3dERssn+qoHKo1LAU0vmW7YqQe9842h39CYQWMCKwj4/D6t2rZKv/jOL0yuWfLxb2EkhGPfPmUtXqx+paXKmzJFrkWLlPnyy70Onn6HQ/78fPmGDJG/h+Ex7eOPlXXPPcqbMkX9Ro+Wa8ECpb/+utTW1qu6oG9IxZZPxnwiko/rP9bzHz1vKLtiDDsaxYPD4QiZtLV6+2q1eltNqpF5aPlEXKW/846cK1Yo849/lMPjieoa31FHyfvd76pt/Hj5jzhC/vx8+fv3N/xd/fp1tli63Urbu1dpu3e3/7VnT+ff9+zpNuCmff65su6/X1n33y/foEHynHuu3HPnyjdiRDy+PlJIX2j5JHwi2MPbHpZfnX9ORheO1jeGfsPEGqWWC0ZdoF+8+ovArlEHmg7o2Z3P6oJRF5hcs+QifCJ2Ho8yn3tOznvvVcamTRFP9w0ZIu+ECfJOmKC2CRPkO/bYno3JdDrlO/54+Y4/PvQzv1+OL79UxiuvKHP9emX87W9ytHb9X5VpBw4o64EH5HzoIXkuvFCtN9zQ9T3RJzHbHX1Nq7dVq7evNpRdOe5KORgzHze5mbm6+ISLdd+79wXKHqx8kPAJRMtRWyvnqlVyPvCA0j77LOx5/n795Pn+99X278Dp+9rXEjcByOGQf+hQeS66SJ6LLpIaGpT5wgvK+NOflLlhQ5etoo62Njkfe0yZa9fK88MfqvXGG9vriD4tFcMnYz7RnWeqnlFNc03gON+Z3+dCUTJcMfYKQ/h88/M39d6B9zR60GgTa5VcjPlEz9XVybVwofqdcIJcv/xl2ODZNmKEmu+8U4d27FDzQw/Jffnl8hUXJ3fmeb9+8px3npoffliHdu5U4yOPyH3hhe1d+UEcPp+ca9cq79RTlT1njtKqqpJXT1gOYz7R1wTv4/6jE3+k3Mxck2qTukoKSnT60acbylZWrgxzdmoifCJ6Pp8yH3lE/U45RVkrVoRdIskzaZIa167V4S1b5L7qqvbxmlaQkyPvtGlqvv9+HaqqUtP996utpCTkNIfPJ+cTTyjvm99U9pVXKu3DD02oLMxGyyf6kq37t2rzF5sNZVeMZaJRogS/27Xvr1V9a71JtUk+wieikrt9u3KnTFHOT36itOrqkM/92dlqvewyNbz1lpr++Ed5f/ADay9plJUlz4UX6vCbb6rpgQfUNnJkyCkOn0/OdevaQ+hVV8lx4IAJFYVZQrfXtH/4pOUT4QS3ek46ZpK+dgTDjxKlbESZhuYODRw3ehq19l9rTaxRclk4HcAKHAcOKPvaa1X64x8r4+23Qz73HXmkmn/5SzXs2KGW3/1OvlGjTKhlDNLT5bngAh1+4w01rVypti7q7/D7A93xmX/4g+S3fwhBZLR8oq+oa6nTuvfXGcpo9UyszPRMXTrmUkPZg5UPyt9H/v1C+ETXvF45V6xQv5NPlnPNmpCP/S6XWhYuVMOWLXJfd538RxxhQiXjKD1dnvPO0+E33lDjww+r7YQTQk5JO3hQOXPnKue88+TYsyf5dUTSNDdLLS2dwSwz06/cFBj6Fhw+6+sd8vlMqgws49Edj6rZ2xw4PqrfUZo6YqqJNeobLh19qdId6YHjD2o/0GufvmZijZKH8IkQ6Rs3Km/CBGUvXCjHoUMhn3vOOUcNmzer9ec/l7KzTahhAqWlyTt9ug6/9poaV63qMoRmvvyy+p12mpz//d8sVJ+iumr1TIXVZjIzpby8zgDq8znU0GBihWA6n98XMtnlx2N+rIw0FsNJtKF5Q1X+tXJDWfDwh1RF+ESnw4eVfe21yjvnHKX/618hH7eNHKnDzzyjptWr5T8mxfeiTUuT99xzdXjjRjUvWiS/y2X42NHUpOxbblHulCnKZlZ8yknF8Z4d6HrHV/39k79rV92uwHFmWqYuOfESE2vUtwQPb3hu13P64vAXJtUmeQifkNS+M1HexIldd7H366e98+bp8Guvqe2MM5JfOTNlZMj905/q8BtvyDthQujH//ynSv/zP5X1q19JYWb/w35ScbxnB3Y5wlc9sNW4j/u5xeeqKLfIpNr0PROOmqCSIzpXXfH6vFr93upurkgNhM++zueT8+67lTtlitJ37Qr52H3xxWrYskX7Zs5s77Pro3wjRqjxT39S07JlIWuEprW1yXXXXcqbMEHpmzeHuQPspC+1fBI++669h/bqr7v/aiibPW52mLORCA6HQ1eMM7Z+PrztYXnaotue2q4In32Y4/PPlTt9urIrKuTweg2ftZWU6PCGDWpesUL+wYNNqqHFOBzyXHKJGjZvluecc0I+Tq+qUu5ZZ8l5zz3MiLe54EDWv3/q/O/Jckvo8PC2h+Xzd844O7HwRH1z6DdNrFHfdFHpRcrJyAkcf9H4hf6y+y8m1ijxCJ99VMazzyrvO99RxsaNIZ+1XnaZDv/972o79VQTamZ9/iFD1LR6tRofeUS+IUMMnzna2pT9i18o5+KL5Th40KQaIlZ9qeXz4EH+NdAXtXpbteq9VYYy9nE3R/+s/rpw1IWGsge3pvbEI351+prGRrmuv165//mfSgsKR74jjlDjmjVq+d3vpJycMDdAB++0aWp46y0dmD495LPMv/5VeaefrvQu1kaF9aXymE9aPiFJf9r5J1U3d24Yku/M1wUj2cfdLJePvdxw/MreV/Rhberurkf47EPStm5V3qRJynr44ZDPvKefrsOvvy5veXnohQhvwAB9fMstanzsMfkGDDB8lLZ3r3KnTpXz3nvphreZVNzXvQOz3SGFTjS6+ISLlefMM6k2GFs0NmTIQyrv90747CMyV69W3pQpSg/ap9yfkaHmX/5Sjc88I/+wYSbVzv68Z52lwxs3ynvyyYZyh8ej7JtuUs6ll0r1fWffXruj5ROprHJ/pTZ9sclQxo5G/7+9O4+P4f7/AP6a2ftIqjnUUXElIUKo9IseWqTUEQmlpaT0UNUWreOrpRStqqq7Wv2mSp1NKUUPdxX9UVpKDkdC3FcOQrL37szvj8gms7u5SHY2u+/n45GHzGeOfe/H7Ow7M59DfI4dj9aeWAudRSdSNNWLkk9vZ7FAOX481KNHgzGbBatsTZtCt3MnzO+849nzsNcQfEgIdFu3wjRihNM62ZYt0HbqBPb4cREiI5XlW20+Kfn0NY4DmT/d4GmEB4SXsjVxl/jQeASqAu3Ld8x3sOH0BhEjqj6UcXgxJjsbmvh4KJYudVpnTkhAwd69sD3yiAiReTG5HMZZs6BbscJpSCbJuXPQdusG+bJl9Bjew3n3nU/hfJp059O3uJzHvTXd9fQECqnCaYD/b45/45XzvVPy6aXYY8eg7dwZ0gMHBOW8SgX90qUwLF4MaKl9T3WxxscXJvdRUYJyxmSCauxYqEaOBBzuRBPPQXc+ibf6/uT30Fv19uV62nro2aSniBGRkl5u9TIYFH8mU7JT8Pe1v0WMqHpQ8umFZD/+CG2PHmAvXxaUcw0aoGDHDlj6U49Gd+AaN0bBjh0wveZ8V0G+Zg008fFgcnJc7EnE5s13PmmQed/F8ZzTI3eax92zNHygIbo17iYo+/rY1yJFU30o+fQmNhuUU6dCPWwYGINBsMrasSMK/vgDXKtWIgXno5RKGOfOhX7pUvAOd5qlBw9C26UL2BMnRAqOuMJxvpV83r5Nyaev2HdpH87cOmNflrJSDG05VMSIiCuvt35dsLwpYxPO3z4vTjDVhJJPb5GXB/WAAVAsXOi0yvTGG9Bt3Ag+MNDFjsQdLP37o2D3btgaNxaUsxcvQvvss5Bu3y5SZMRRfj7AccUJmUbDQy4XMaAq5u8PsGxxApqfz8Di3TP5kbu+OvqVYDkuNA4PaWgGO08T0zAGEYER9mWO57Dk3yUiRlT1KPn0AuypU9B26QLZrl2Ccl4uh37xYhg/+8yn52X3FFyzZtDt3g3rk08Kypn8fKgHDoR88WLqiOQBvLm9J1A4sIXjdKF099P7peWkYcf5HYIyxztsxDMwDIORbUcKylalrsIto/fMmkfJZw0n/f13aLt1gyQzU1DO1akD3a+/wpKQIFJkxBU+IAC6n36C6eWXBeUMz0M1eTJUo0dTRySRefO87kWo05Hv+eLIF4Ll/9T5DzrU6yBSNKQ8/Zv1Rx1N8fTNeqveqwadp+SzBpOtXAn188+DuXNHUG79z39QsGcPbP/5j0iRkTLJZDDOnw/DrFngHcZXla9aBU2fPmByc0UKjnjz7EZFaKB533I5/zJ+PP2joGz0o6NpHncPppAqMKKNcMzo/x37H4xWo0gRVS1KPmsijoPio48KB4632QSrzAkJ0P3yC/i6dUUKjlQIw8A8YgT069Y5jQcqPXAAmpgYsKdOiRScb/PmzkZF6M6nb1ny7xJYOat9OfTBUBpeqQZ4udXL0MqKO6pm6bOw7tQ6ESOqOpR81jRGI1TDhkE5b56gmGcYGD7+GIYvvgAUCpGCI5VlfeYZFOzc6dQRSXL+PLTdukG6Z49IkfmuW7eEl0VvTD7pzqfvyDPmYUXKCkHZqLajIGElIkVEKqqWshaGtBQOOv/l0S/B8Vwpe9QclHzWIExuLjTx8ZBv3Cgo51Uq6FesgHnUKIAeo9Q4pXZEunMH6uefh2zNGpEi802+8Nid7nz6jmXJy1BgKbAv11bXxoCIASJGRCpjxCMjIGGK/1A4ffM0dpzbUcYeNQMlnzUEe/YsNF27QnrokKCcCw6G7pdfYI2LEykyUhX4gADoNm6EeahwzD3GaoX67beh+Owz6gnvJo6JGN35JDWV0Wp0GqD8jTZvQClVihQRqawQ/xA8F/6coMyx81hNRMlnDSA5eBCaZ55x6tFua9as8JFtdLRIkZEqJZfDsGABDDNmOK1Sfvpp4ZScNCBjtfOFO5+OPfjpzqd3WndqHbL0WfZljUyD16JoHveaZmS0cNil/7vyfzh6/ahI0VSNCiWfZrMZM2fORExMDLp3746VK1eWum16ejpeffVVdOzYEUOGDMGJErO3cByHjh07ol27doKf/Pz8+38nXkr244/QxMeDvSUc38vasSMKtm8H36iROIGR6sEwMI8cCd2KFeAd2u7K16yB+oUXAIfRDUjVojufxBtwPIdFRxYJyoa2HIpayloiRUTuVevarfF0g6cFZTX97meFks9FixYhOTkZixcvxsSJE7F8+XLs2OHc5sBgMODdd99Fy5YtsXLlSrRp0wZjxoyBTqcDAFy5cgVmsxmbN2/Gb7/9Zv/ROkw7SADwPBTz5hVOlekw7qP5xReh27ABqEUXEW9ljY+HbvNmcA8+KCiX7dkDbY8eYK5eFSky7+cLdz6pzaf3++3sb05Tab75yJsiRkTux6joUYLlzWc21+gpN8tNPg0GAzZv3oyxY8ciIiICTz/9NBISErB+/XqnbXfu3AmpVIp3330XjRs3xpgxY6DVarFz504AwLlz51CnTh3UrVsXQUFB9h8aa8yB1QrluHFQfvSR0yrjpEkwfPUVvGq+P+KSrUMH6HbuhM3h7rYkLQ3arl3BpqWJE5iX88U7nzTDkXfheR4L/xFOtdyvWT808G8gUkTkfsU0jEGLwBb2ZY7n8NW/X5Wxh2crN/nMyMiA2WxG69at7WVt2rTBiRMnYLVaBdumpqYiKioK7N2BsxmGQVRUFFJSUgAUJp8hISFVGb/30emgTkiAYplwJgNeLoc+MRGmCROoR7sP4UJDodu5E1aHdr3slSvQ9ugByR9/iBOYF3O+81nzhzVx5JhQ02N37/LX1b/w9/W/BWWjo0eLFA2pCgzDOLX9XJ26usZOuVlu8pmTkwN/f38oSrQ/CwgIgMViQV5entO2wcHBgrKAgABkZRU2eM7MzIRer8fw4cPRo0cPvPvuu7hw4UJVvA+vwGRnQxMXB9m2bYJy/oEHoNu4EZYXXhApMiImPjgYup9/hqWncFBo5s4daPr3h2ztWpEi806+MMi8453P3FxKPr3JwiPCu55dG3VFZFCkSNGQqtK/WX/U1RRPIKO36vFt8rciRnTvyk0+jUYj5A6PeIuWzQ5tEY1GI2QymdO2lrs9dM+fP4/8/Hy8/vrrmDNnDuRyOd58800UFBTA17GZmdB06wbpkSOCcu7hh1GwfTtsDmNAEh+jVkO/ahVMw4cLihmrFeq33oLi889pKKYqcOMGg4KC4kRMoeDhMAGVVwgK4iGVFp8v2dksHO4lkBrqVO4pbMsU3sCgu57eQS6RY8Qjwik3E48l1sgpN6XlbSCXy52SzKJlpVI4VphCobAnmiW3LdouMTERHMdBpVIBAD7++GP07t0be/fuRa9evVy+fkZGRgXfyv1z52uVpElNReiYMZA4XP31YWHIWLgQFokEECm2ksSqn5rAbXUzbBgeUqvRYMECQbHyk0+Qn5qKC++/D0jL/Vi7VU06bw4e9AdQnG02aaLH2bPVF7+YddOwYQucPau2L2/bdg3R0Z5zI6AmnTdiKK1+Zh6fKViOeCACDxke8qn69Ob32lHdEWqJGnqbHkDhlJtf7P0CfUL6VGh/d9VNWFhYmevL/ZaqXbs28vPzYbFY7Hc1c3NzIZfL4e9wSyA4OBi5ubmCstzcXAQGBgKA4NF90XK9evWQnZ19z2+gqmRkZLjttUqS/vYb1G+9BcZgEJRbOneGZcUKNPKQ2y5i1U9N4Pa6mTYNukcegXr4cDAmk704ePNm1DIYoF+2DPCQESRq2nnz22/CpzzR0bJqi1/suomOluLs2eLlvLyGCAszl76DG4ldN56utPq5VnANW7duFZS998R7CA8Pd1doovOFc+eVnFfw5dEv7cvrL6/HuC7jwDJlP8z2pLop97F7eHg4ZDIZkpOT7WXHjx9H8+bNIXW4w9KyZUskJyeDv/v4j+d5pKSkoFWrVrBarejVq5dgiCa9Xo9Lly6hYcOGVfV+ahT5t99CnZDglHiaX3wR+nXr4JXP+0iVsMbHQ7dpEziH4bZkO3ZAExsLJiurlD1JWVJThfNdt2xpEymS6uf43hzfO6l5vv73a1i44qePjR5ohN6hvUWMiFSHEW2EU26m30qvcVNulpt8KpVK9OzZE7Nnz0ZaWhr27duH1atXY8CAwrlhc3JyYDQWtjfo0qULDAYD5syZg8zMTMyfPx86nQ5du3aFVCpFhw4dsGTJEhw9ehRnz57Fhx9+iKCgIHTs2LF636Wn4Tgopk+Hatw4MJywJ61x/PjCoZQc2s4S4sj22GPQ7dgBzmEECemxY4VDMXnxo6fq4lvJp/Dak5pKE97VZLdNt7E8ZbmgbFTbUZCw9EeFt2ng3wD9mvUTlDlOKODpKnS1GTNmDCIiIvDWW29h1qxZGDZsGLp27QoA6NmzJ3bt2gUA0Gq1mD9/PpKTkzFkyBAkJydj/vz50Gg0AIDx48fj8ccfxwcffIBXXnkFALBw4UKnO6hezWSCavhwKOfPFxTzLAv9ggUwTZ5MQymRCuPCwwunWC0xFBoAsBcuQNOtGyR//SVSZDWP0Qikpwsvid6dfArf28mTEjiMnkdqkBUpK3DHXDz7WZAqCIMiB4kYEalOI9sKh106cOUA9l/aL1I0lcfk5eVRF1m4py0Ec+sW1IMHQ3rggKCcV6uhX7YM1u7dq/X174cntRXxNB5RNwUFUL/8MmR3/xAswisU0CcmwhofL0pYHlE3FXTsGItOnfzsyw0acEhJqb6pfz2hbsLD/ZCVVZxw//VXPpo3F39cU0+oG0/mWD8mqwltlrfBNd01e9mkxyZhQvsJYoQnKl86d/ps7IM/Lv5hX45+KBq7Bu4qdeIeT6obes7iJsz584VDKTkknlxQEHS//OLRiSepAbRa6L//HuaXXhIUMyYT1C+/DPmSJSIFVnP40iP3ItTu0zt8k/yNIPFUS9UYFjVMxIiIO0zqMEmwfOTGEWw5s0WkaCqHkk83kBw5Au0zz0Di0AbPFhaGgl27YGvbVqTIiFeRyWBYtAjGScILEsPzUE2cCOXEiYDN+xOqe5WS4ovJJ7X7rOnyjHmYc2iOoGxIyyEIUAWIFBFxl3b12iG2aayg7KP/+wgWm6WUPTwHXWmqmfSXX6CJjQWbkyMotz7+OHQ7doB3mLebkPvCMDBNmAD9l1+Cd2hLrViyBOqEBIAmdXCJ7nzSnc+aaM7hOcgzFY8R7S/3x/h240WMiLjTh098KOj5fjbvLFamrhQxooqh5LMayZcsgfqll5yHUurfH7qffgL/4IMiRUa8nWXwYOjXrQPvMN6nbOtWaHv2BHPtWil7+iaed068WrUSv+1jdaPks2Y7f/s8Eo8nCsreffRdBKmDRIqIuFt4QDheihQ2t/rs0GcoMHv2TQZKPquDzQble+9BNXEiGIcpD43jxsGQmAg4DLhPSFWzdumCgq1bwdWrJyiXJCdD+8wzYFNSRIrM81y+zOD27eJG+lotj0aNvD/5DAvjIJcXX6OuX2eRk0OjbdQUMw7MgNlWPDFAfW19vNn2TREjImJ4r8N7UElV9uUsfZZgEHpPRMlnVdProR4yBIr//U9QzEsk0C9cCNOUKQBL1U7cg2vVqrBdcVSUoJy9cgXaHj0g3VGzBiauLo53/Fq0sPnEx1QmAyIiqN1nTXT0+lH8ePpHQdkHj38gSEKIb6irrYu3274tKPviyBfI1pc+e6TY6CpThZjr16GJjYXs118F5bxWC/26dbAMHSpSZMSX8fXqoeC332BxGFGBKSiAeuBAyBMTS9nTdzg/cvf+9p5FHB+9O3a8Ip6H53lM3j9ZUNYyqCUGNB8gUkREbKOiRyFAWdzJrMBSgNmHZosYUdko+awi7LFj0HbpAunRo4Jyrl49FGzdCmtMjEiREYLCoZjWrIFpxAhBMcNxUE2YAOX77/t0T3jnzkbe/8i9CLX7rHn2Ze3DgSvCYfs+7vgxzWbkwx5QPID/tv+voGx5ynKcyzsnUkRlo+SzCsh++gnaHj3AXr0qKLdFRqJg505wrVqJFBkhJUgkMM6aBcPs2eAdnikrvv4a6sGDfbYnvOOjZl/o6V6Eks+axcpZsfjkYkFZTMMYdG7YWaSIiKd4tdWrCPEvnm7Zylnx8YGPRYyodJR83g+Og2LmTKhfecWpR7ula1cUbN0Kvn59kYIjxDXz8OHQf/+9c0/4bdug7dEDzKVLIkUmjoICIDOz+FLIMDxatPCd5NOxiUF6OguzuZSNiehWpq7Eed15+zIDBtOfnC5eQMRjKKQKTHl8iqBsY/pG/HvjX5EiKh0ln/dKp4P65ZehnO3cpsI0ciT0SUmAv78IgRFSPuuzz7ruCZ+SAm3nzpD83/+JFJn7nTghAc8X9/Bu0oSDRiNiQG5Wqxbw8MPFzQwsFganT9NXgyfKN+fj078+FZQNajEILYNbihQR8TT9mvVDVLCwg+nUP6eC5z1rJnW6wtwD5vJlaHv0gGyLcBorXiaDfvFiGGfMACT06Ip4tlJ7wufkQBMfD/k33xQOgOnlfLm9Z5HISHr0XhMsOrJI0INZJVXhg8c/EDEi4mlYhnW6E77v0j78fuF3kSJyjZLPSpL8/Te0XbpAkpwsKOeCgqDbsgWWhASRIiOk8uw94Xv1EpQzVitU//0vVKNHAyaTSNG5hy+39yzi+Oiderx7nmsF1/DlEeHYjW+3fRv1tPVK2YP4qs4NO6NTSCdB2dQ/p4LjPecPa0o+K0GWlFQ4VWZWlqDc1qIFCnbvhu2xx0SKjJD7oNVCv2oVjO+/77RKvmoVNL17g7l+XYTA3MMXp9V0RJ2OPN/MgzOht+rty8HqYLzz6DsiRkQ82bQnpwmWU3NSse3KNnGCcYGSz4qwWKD84AOoR4wA43AXyNKzJwp27ADfsKFIwRFSBVgWpvffh271aqeOSNLDh6Ht1AmSf/4RKbjqw3FAWprvjvFZxLGpQWoq6wstLmqMEzknsObEGkHZ++3fh5/cT6SIiKdrU7sN+jfrLyj7Ov1rGK1GkSISouSzHMzVq9D07g3Fl85TVRnHjoV+9WrA4cuakJrKGhuLgp07YWvSRFDOXr8OTc+ekK1eLVJk1eP8eRY6XXFno1q1ONSv73tZV+PGHNTq4vd98yaLa9domk1P4fjItKGmIYa0HCJiRKQmmPz4ZMhYmX35muEaVqauFDGiYpR8lkGydy+0Tz8N6V9/Ccp5hQL6xESYPvyQpsokXoeLiEDB77/D4jAxAmM2Qz1yJJQTJgAWi0jRVa2UFMf2nhwYH8y5JBI4DS9Fj949wx8X/8DO8zsFZaOaj4JMIitlD0IKNXqgEV6NehUA4C/3x9vN3kZCpGf0S6HMyRWOg2LOHGj69gWbLZwblXv4Yeh+/RWWF14QKThC3KBWLejXrYPpHec2ZYrERGji4sBcvixCYFXLsWONL7b3LELtPj2P3qLHhD0TBGWP1X8MTz30lEgRkZrmv+3+i3ei38GxV47h5dCXoZapxQ4JACWfTpibN6EeMADKGTPAcMJ2UJaYGBTs3Qvbo4+KFB0hbiSRwDh9OvRLl4JXqQSrpAcPQtuxI6Rbt4oUXNWgzkbFXLX7JOL6cP+HSL+VLiib0XEGGF+8PU/uSZA6CNM7TkeAKqD8jd2Iri4lSI4ehfappyDbKXzEwTMMjBMnQr9uHfjAQJGiI0Qclv79UbBtG7iHHxaUs7duQfPii1BOnFhjh2Oi5LMY3fn0LNsyt2Fp8lJBWUJkAqLrRIsUESFVh5JPAOB5BK9fD0337mAdHiVygYHQb9wI03vv0cDxxGdxrVuj4I8/nNqBAoBiyRJonn0W7LlzIkR27/LygMuXiy+BEgmP5s09Zxw8d3McaP7MGRYOswYTN8nSZWHkzpGCssYPNManT39ayh6E1CyUfAJQzJyJhrNng3GY0Njarh0K9u6FtXNnkSIjxHPwQUHQr18Pw/Tp4B3+EJMeO1b41GDDBpGiqzzHzuiQ9AAAIABJREFUO3vNmnFQKkUKxgP4+QGNGhUnoBzH4ORJ+oPb3Xiex8idI5FjyLGXSRgJErsn0tBKxGtQ8gnAMmAAbA6TOZvefBO6X34B7/CokRCfxrIwv/MOdFu3gmvQQLCKyc+H+rXXCmdF0utLOYDnoEfuzqjdp/i+Tf4WO87vEJRNaD8B/6n7H5EiIqTq0ZUFABcaivNTpgAAeD8/6FasgPHTTwG5XOTICPFMtnbtkL9/PyyxsU7r5CtXQhsTA/bkSREiqzjq6e7MsQ5omk33OpV7CpP3TRaUta/bHuPajRMpIkKqByWfd92KiYHhk09QsGcPrPHxYodDiOerVQv6Vatg+Pxz8A5/qElOnoS2SxfUXrsWsHlmUud859N323sWoU5H4jFZTXh92+sw2opnoPGT++F/3f8HKSsVMTJCqh4lnyWY334bXGio2GEQUnMwDMyvv46CXbtgc/jsMAYDQubPh6ZnT7Dp6aUcQBxWK3DqlOMA856ZJLuT49SiaWkSmmbTTT45+AlSslMEZbM7zUajBxqJExAh1YiST0LIfeOiolDwxx8wDxjgtE566BC0HTtCvmBBYdbnATIyWJhMxWMl1q7NoXZtyrJCQnj4+xfXw507DC5epDElq9veS3vxxZEvBGV9w/piYMRAkSIipHpR8kkIqRpaLQz/+x/0S5aA9/cXrGJMJqimTYOma1ewaWkiBViMOhu5xjDOQy7Ro/fqdct4C29ufxM8ipP++tr6mB8znwaTJ16Lkk9CSJWyvPgi8v/6C5Znn3VaJ/33X2g7dYLis89EnR/eMaFq1Yraexahdp/uw/M8xuweg6sFV+1lDBgseXYJailriRgZIdWLkk9CSJXj69WDPikJmR99BO7BBwXrGIsFyk8/hbZzZ7DHjokSn+MQQnTns5hju09KPqvP9ye/x6aMTYKy0dGj8VQDmrudeDdKPgkh1YNhcLNHDxQcOgRLXJzTaklqKrQxMVBMmwbk57s1NHrsXjoa69M9TuWewoQ9EwRlUcFR+ODxD0SKiBD3oasKIaRa8bVrQ79yJXQrVoALChKsY2w2KBcsgN+jj0K2ejXAVf/j76wsBjduFF/6FAoeYWH02L1IRIQNLFvc/vDcOYm7/zbwemdunUH8hngUWArsZSqpCt/0+AZyCY0vTbwfJZ+EELewxsej4NAhmF94wWkde+MG1CNHQtu5MyQHDlRrHI53PZs35yClYRTtVCogNFSYjJ84QY/eq8r52+cRtyEON/Q3BOUzOs5As4BmIkVFiHtR8kkIcRs+MBCGxETo1q4FV7eu03rJ8ePQ9uwJ1csvgzl/vlpioPae5aNOR9Xj4p2L6P1jb0EHIwB4tdWreDXqVZGiIsT9KPkkhLidtWdP5B8+DOP48eAVCqf18k2b4Ne+PRQffVTl7UGpvWf5qN1n1btacBVxG+JwKf+SoDwhMgFzusyhYZWIT6ErCiFEHH5+ME2ejPzDh2Hu29dpNWMyQTlvHvyioyFbtarKpumk5LN8dOezat3Q3UDchjicv31eUP5C8xewMGYhWIa+iolvoTOeECIqvmFDGJYvR8HWrbC2aeO0ns3KgnrUKGjbt4ds7dr7Gh/UZALS04WXPcehhYhz8pmWJqmq3N/n5OhzEL8hHmdunRGU9wnrg6+6fQUJS4k98T2UfBJCPILtsceg+/136L/6ClydOk7rJWfOQP3WW/CLjoZ82bLCTLKSTp1iYbUWP958+GEOtWgsbyd16/IICCh+9K7XMzh3jr4uKuuW8Rb6bOyDUzdPCcp7Ne2Fb7p/AylLPd2Ib6KrCSHEc7AsLIMGIf+ffwrbgyqVzptcvAjV2LHwa9MG8q++AnS6Ch8+JYUeuVcEw1C7z/uVZ8xD3419kZqTKijv1qgblvVYBplEJlJkhIiPriaEEM+j1Ra3B33xRfAS50eT7LVrUE2aBL+oKCjmzQPu3Cn3sNTes+Ko3ee9yzfn4/lNz+NYlnAGr84hnbEydiUUUudOdoT4Eko+CSEeiw8JgWHJEuQfOQLTq6+ClzsPwM3m5kL50Ufwb9UKihkzwFy65OJIhZzndKfkszSOyafjXWPi2plbZ9D7x974+/rfgvInH34Sa3qvgVLqfDefEF9DySchxOPxjRrBOG8e8o8dg+mtt8CrVE7bMLdvQzlnDvxat4Z6wABIf/sNsFqLj8G7GuOTZjYqjatOR6R0PM/ju5Tv8NSap5zueHao1wFJcUlQy9QiRUeIZ6HkkxBSY/D16sE4cybyk5NhHDsWvJ+f0zYMx0G2fTs0gwYVPpKfORPMpUu4coVBXl7xJU+j4dG4MSWfpWnWjINUWjzN5uXLLG7dorEoXcnWZ+PFn1/Eu7vfhd6qF6yLfiga6+LXQSvXihQdIZ6Hkk9CSI3DBwfD9OGHuJOSAuOkSeAefNDlduzVq1DOng2/1q2R8dIcwbrISBtYugKWSqEAwsOp01F5tmVuw+OrH8e2zG1O62KbxmJD3w3wV/iLEBkhnouuJISQmqtWLZgmTEB+cjIM8+bB1qqVy80YjsPhf4Vt7VrVvg5wdOezLI6P3v/6i4YGKqKz6DB291gM3DIQ2fpswTqtTIvFXRdjVewq1FLSWF6EOKLkkxBS8/n5wfzqqyjYtw8Fv/8O85Ah4DUa++o96ITP8V/BLo/+MgN+LVtCOWECJPv3V9kMSt7EsUPW558rcPAgtf3898a/eHrt01iWssxpXbu67bB/8H4kRCbQlJmElIKST0KI92AY2Nq2hWHRItw5eRKG+fNxsllv9MMGWFE8rqIaOjyHjWCvXoUiMRHa3r3h16wZVKNHQ7prF2A2i/gmPMdzz1mgUBS3+zSbGSQkqHH+vG8mVUarEZ8f+hxdf+jqNGORhJFg0mOT8Nvzv6FxrcYiRUhIzUDJJyHEO/n740afVxFn+wm3ECBYtRJDUBvCR6VsTg7kK1dC078//ENDoXr9dcjWrAFz8aI7o/Yo9evz+PJLg6AsN5fFiy9qKjKsqtfINeRi9qHZaLWsFT45+AmsnFWwvkmtJtj+wnZMaD+BZi0ipALoU0II8UoWCzBkiBpnzggfE0977gh6cxz4nRowpcyOxNy5A/n69ZCvXw8AsDVqBFvHjrA+9RSsHTuCdzH9p7fq39+C9HQjZs8ubjN78qQEr72mxvff6yH14m+RzLxMfHX0K6w5sQYGq8HlNkNbDsUnT31CvdkJqQQvvmwQQnwVzwPjx6uwf7/wEjdggBnvfB0KA/MdDAYDpL//DtmWLZBt3QqmjFt5kvPnITl/HvJVqwAAtrAweyJq69DB65PR9983ISODxU8/FQ/yv3OnDJMnKzFrllHEyKrHoauH8MWRL/Dr2V/Bg3e5TaAqEIueWYReTXu5OTpCaj5KPgkhXuerr+RYsUI4G1KHDlYsWmSAvQ+ISgVrr16w9uoFg9kM6b59kP38M6S//go2J6fM40syMiDJyIDi228BANxDD8HWpg1sUVGF/7ZuDb5+fcBLOpywLPDVVwZcuMDi6NHir42vv1YgPJzDq6/W/DayNs6GXzN/xeIji3H42uFSt/OT+2Foy6EYHT0atTW13RghId6Dkk9CiFfZtk2KyZOFwyo1bMhh9Wo9FKVNqS2Xw/rMM7A+8wwwdy4khw5Bum8fpPv2QfLPP2AsljJfk71xA+z27ZBt324v44KCYGvd2p6UcuHh4Jo0QelBeDaVCli7Vo+YGC2uXCnuLvDf/yrRpIkNnTrVvNECrhZcxe8XfseeC3vwx6U/kGvILXXb+tr6GPHICAxpOQQPKB5wY5SEeB9KPgkhXiM1lcWwYWrwfPEdR39/HklJOgQFuX586kQqhe2JJ2B74gmYJk4E9HpIDh8uTEb374fk6FEwFRiWic3JAbt7N2S7d9vLeJYF36ABbKGhaBAUBPmjj4ILDYWtaVPwDz8MTx/1vk4dHmvX6tCjhxZ6fWEd22wMhg7VYNeuAoSFefa4qXqLHgeuHChMOC/uwcnck+Xu0yq4FUZFj0LfsL6QSWTlbk8IKV+Fkk+z2Yw5c+Zg9+7dkMlkGDRoEIYMGeJy2/T0dMyaNQsZGRlo3Lgx3n//fbRo0cK+fufOnViyZAmys7PRvn17TJo0CQEBAS6PRQghFXXjBoOBAzUoKChOPFmWx/LlekRE3EdSpFbD1qkTbJ06wQQA+fmQHjxYmIgePAhJaioYY8XaPTIcB+bCBbAXLuAhAPjhB/s6XqkE17AhuPr1wderB65+feHv9eoB/v6iP8pv3ZpDYqIeL71UnOTfvs1gwAA1du3SISCggkl+NbNxNly8cxHpt9JxIucE9l7ai4NXDsJkM1Vo/66NumJk9Eg89fBTNF4nIVWMycvLK/dKMWfOHPzzzz+YOnUqsrKyMG3aNEycOBHdunUTbGcwGNCvXz8888wz6Nu3L3766Sds374dGzduhEajwYkTJ/DGG2/gvffeQ7NmzTBv3jzIZDIsWrSo2t5ghdhsyElMRMiePWD0evBqNcyDBsEaF1f5OxE2G6RbtkD+/fcVP1Zl93HcXqWCLSwMkowMMAaD83JFjrd5MxQLFoA9exaM0QheKgWkUvD+/mDy88HbbGCUSnANGsD07ruw9ukDWK1QTJ1a2CPYbAbkcpgHDIBp+nSAYSr2nsp7L2o1zAMHAgxTuTqtinqt4OtkZGQgLCys9Dh8mLvqxmAAevfW4J9/hH9Pf9hkBYaG7od6UC8o4zqBcfh/5Gw8Dm3Kxi8LLyPrkhkWMw+wEqjr+sGk0MLCKKHyl0ClZtF7kBKd4xRgWYdExGIBm54OybFjkBw/XviTkgJGL5zjuyroJVpky+sjT/kQbA8G4mxeEC7oayOXCQQfFITOLzyAx+IeBIICwQcGAsrC5gc2G/DLFhZJa6W4dIlBTg6DoEAeD4fwGDTYitg4rtKXuoUL5Zg6VSUoe/JJKzZu1EEuL2WnCqrMeaOz6JBxKwMZNzOQfivd/u/ZW2crnGgW8Zf7Iy4sDm+3fRsRgRH3ErpbVNfnygYbtki34Hv599Azeqh5NQaZByHOGgcevNO6geaBYMDc8/YqXoWmtqb4P+n/4TJ7GQDQgGuAd0zvgAOHLxRf4BJ7yV4+xjQG8dZ4sHdHiSwZr47R4Q7uIMeag5uKmzDBBAYM5JCjNlcbIXwI1LwaYbYwZEgyYGAMgnjZMkaeLKteytqvMvWtY3TIRz4AwB/+FXqNysblSd9V5SafBoMB3bp1w9y5c9GuXTsAwLfffou//voL33zzjWDbLVu2YOnSpdi0aRNYlgXP8+jfvz9eeukl9OnTB1OnTgXP8/joo48AADdu3EDv3r2xYcMGNGjQoJreYtmY7GyoBw4Ek5ICSYmBpXmlErbISOiTksAHB1fqWJK0NMGdkLKOVdl9St0eQMmvRKflso7Xvz8kyclg+IrdseAZBrawMLCXL4PR651el1epwDduDDYzs8z3VOH3cveuQ8n4yvv/qbJ6rcB54EkfaE9THXWTlwekp0tw+jSLjAwJ0tNZpKZKcPmy8GI7CGswGZ8ULijlkEWGIiDpc0iCC5+03M424/N+qchMMaDw1Co8z6yQ4BrqwgQ5Sg6FLFcCYZFSzEuqhYDgsr9wsq/bMPm5i9CcPoYo279ogRMIRzoawr1jhvJyOWxaf1zT+SPH/ABu8/64g8Kf2/DHHTwAg0SDWvVUGPymHH611eBVKkBd+C+vVtt/h0IBXi4vbLMql4MHg5EjVVizRphphoRwiIy0ITycQ3h48b8PVKCZpMVmgc6iQ1pGGoLrByPXkItsQzZy9DnIMeQgW1/4e7Yhu3CdPhs5hrI7h5WFZVg8WudRdGnYBV1CuqBtnbY1YpzO6vhcZTPZGKgeiDRJGoxM8TVQySvRzNYMPHikS9IF65i7d755hhdsH24LBwMGpyWny93e6YJfVAbncoZnEGWLwo/6HwHAZbzlcng9Ja9EpC0SSfokBPPO1/iy6qWs/cpT2nFLKus17iUuT/quKjf5TE5Oxuuvv459+/ZBcbeh/JEjRzB69Gjs3bsX0hKDvM2cORN6vR4zZsywl02fPh0sy2LKlCno168fEhIS0LdvX/v6+Ph4vPHGG+jZs2dVv7fycRw0XbtCeuQIlgf/B4eUzZw3CQ6GpVev8h918Txkv/4KNju71E2cjlXZfSqwfXmq+nj3HEPPXpD9dv+v7fL/pxrqtazz4M7t2/CvyDerL7l7Vbl9+w4eeMC/sIh3rjseAG9jYLOx4DgGPMfAZi3+nbOx4GwMbueqce38g7hxoRbu3FSX+/Jh2j/wcuMhkDDCtpmSxvWgnfAaAOCnzy7g+nkzSn4T8QBuIkAwG5Kj+o0leH2CGozjHdCiY3DA57NlOH+uaH3xdlKY8RBuoA6yUAfXUAfX7/7cgJYpKPd9FcXoVOYiFN7FOscy/u7vFfmXYwAbe/dfBrBJJTBJlFh5dBsu3nqy3LgV6uvQBmRAHZgBRnsDFokVFtYCi8QCs8QCM2uGjbUCrA1grQBjAxiX79a5yOV2rgUyGkQydRDJ1kEEWwdqtih5ZgSfb77kZ728679gW8GKigVV0cf6dze7c/sO/O9+ru6d8LbBL7Jfkc2697vgXgVxQWDAVGm8wVwwYi29UNl6cb1feSpX386vUfm41H4swodoPSb5LPdPvJycHPj7+9sTTwAICAiAxWJBXl4egoKCBNs2bNhQsH9AQADS09MBALm5uYLti9ZnZWXd15u4V9ItWyBJSwMAzFcPQcqFkc4bXQJwtKJHjCl7tctjVXafcrYvT1Uf775iqILXLvX/p4rrtVLnARFV0AlkDIvHB0pX43ZeBXb+U/hr27s/lXQDwJs7y9nokbs/DswoPJUuVf5lPZANgA5o2wdYegi41bTMrU36OjDp6yD3ckf3hFeKXAD77v6QkkT4LvAwm12Wll8vrvcrT+Xq2/k1KhdXiOQyNgy5XqnXrE7lNlYwGo2QOzTgKVo2O8x/bDQaIZPJnLa13B2mxNWxZDKZ03HcRb52bYU7ChBCaoCHDwCDewIuE09SLTS5QEJ3oF7pY2MSQkhJ5d75lMvlTslh0bJSKRxLT6FQ2BPNktsWbefqWBaLxek4JWVkZJQX4j0Lz80t4+EaIcQjsWYgMB0IOgUEnyz8N+hkYZnC9XSZpJoFngGGtwdMGiC3GZAdAeQ0B3Lu/psbBnD32QuJEHLPirpMVGdOVVJ5j/fLTT5r166N/Px8WCwW+13N3NxcyOVy+PsL25wEBwcjN1c4SG9ubi4CAwPLXO/4KL4yb+B+qO7GBQDtub9R0GCVy+14lQp87bJnsmCyssAYXM/9W9qxKrtPRbd39/HuKQZWAoarmkGpHf9/qqteSzsPLFYrZN48wfW9YiC4bhSWObfNY1kbGJYr/JFwxb+XKJepDfCvdwV+9a5CUzsLrMRx6KQwmPfdge1a+W2oJHWDcQZNcfOa88DxBqhgrcAIdMF1JXj0Kdd/uv65T4Jr18pq/yVcx5exrlSuGnk67FuvHgcGwNUrrHCdfV9GsMzwDOo/DHTtyoNhGDBg7EMMMQwDFiwkrAQsw0ICFizHg+UACcdBwvFgbTwkNh5ysJDyLBR8DqTcn5Bxf4K1SHErKxBZV2rjxvXasBpVkNgkYDgpJDYp2Lu/M1YGNo6BTmeETHa3Jz3PF9YSz9/9lb9bafzdYr5EJZb43d5BkS/+XVDZfKnLLv+HHLd18atQBduh3sPIVE6fq0oTvugNJgsGRpzvAk+i4lV4iC++xle0Xhz3K8+91HfJ17iXuAL8rQD8a06bz/DwcMhkMiQnJyM6OhoAcPz4cTRv3lzQ2QgAWrZsiWXLloHnCy9ePM8jJSUFL730kn398ePH0adPHwCFvd2vX7+Oli1bVvX7qhDzoEGQ7tsHxmjEN5dWAljptA2vVEKfmAhrXOsyjyXdtAnqESPKfIzveKzK7lOR7cvjdLzXXy939paqxiuVMA0bBsXSpffd7MHV/0911GtZ54En9SD0NO6sG4Pxd9waMR0wltGMRynHg4nTkMK1xOJhp2CxChOzfGhwAw+hrBZJciXwcaI/unR3/cRmi5HFWyMUMBqdOxwVf+WXXXa/ZDIes741AByPt0YoYDKWdezCCBRKHp8mmhEbI/5A8YXnTcPyN/RRVf252iTdhBHqEZXrNS4ilmchgQQWpuq+u5S8Eon6RMRZi6/xFakXV/uVp7L17fga9xqXu+56VkS5bT6VSiV69uyJ2bNnIy0tDfv27cPq1asxYMAAAIWdjIx3v7S7dOkCg8GAOXPmIDMzE/Pnz4dOp0PXrl0BAP369cP27duxadMmnDlzBtOmTcPjjz+OkJCQanyLpbPGxcEWGVnmNrbISFhjY6vlWJXdpyLbl8fpeFFR93W8e43BNG3afb+XomM5/v9UR71W9Dwg4lHGdYIsMrTMbWSRoVDGPo1H44LQOEoDxztAWuigQNlt0MMipegUW/oUmbFxHCIjxU3gWrXiEBtrq1QskZEcesaKn3gS94uzxiHSdv/XY3dpY2uDKFvVfndF2iIRaxVe4ytSL672K09l69vxNaorLneq0OioY8aMQUREBN566y3MmjULw4YNsyeUPXv2xK5duwAAWq0W8+fPR3JyMoYMGYLk5GTMnz8fGo0GABAVFYVJkyZh2bJleO2116DVajF16tRqemsVwLLQJyXBGh0Nm0NHKF6phDU6GvqkpIoNNF/iWLxDG9ZSj1XZfcra3iEcp+Wyjte6tXBYkXLwDANreDg4tdrl63IqFWwtWpT9nqTSir8XhnGKr8z/n6qs18qeB0Q0DMsiIOlzyKJbAEqH9oVKOWTRLRCQ9DkYlgXLMhj7Q0s0jVKDYe4+1kXhvce6uAYFjACEiZhcCURGF47z6TTQfAksC6xOMiE62ga5vOjYxccvVHYZSpSpVDxatLBBqSzvUw4wDI+oKBu+/8EAli2OpW20DXKFq/15yBU82kbbsDrJTKe4j2LBIkmfhGhrNJS88Bqo5JVobW2NKGuU0zqGZ+xjd5bcPsoahdbW1hXa3vXYYa7LGZ5Ba2tr/KD/odR4y+VwXCWvRLQ1Gkn6JKeB2curl9L2K09Zx63Ia1RXXO5UoRmOvB7HITsxEQ1//90+Q5A5IaHwTldlr8YcB+nPP0O+Zk3Fj1XZfRy3Vypha94cktOnXS9X5HibN0Mxf75whiOZDLyfH5iCAnBWK1ilElxICExjxhTO+sNxUEybBnlSEmCxADIZzC++CNPUqQDLVuw9lfdeVCqYBw0CeL5w5qHK/P/cb71W8HXosXvpxKgbnuNg/Hkv9Gt+AW8wglEpoU6IhTL2aecZjjgef2/OxpYFV5B10QSrmQfPSqCp5wezQgszo4TKTwKlmkVcghKdYl3McFQKjgN+/ZnFmtVSnEhjcf06C+5uPiuXAw8+aIJcIcedfAYWc+ExZXIeBQUsZDJAreYx8EUzPpxqAcsCP/8swfdrZNAbGKiUPMLDbdi/X4pLlwrfU0gIh3fGmBEXZ3M6XYtiWbtGisuXGORkMwgM4tGgAY/BL1nRM7byMxxVJ/pMla266ocDh5+lP2ONfA0MjAEqXoUEc4L9DprjukHmQeDB43v59/e8fbgtHPuk++wzGYVwIRhjGgMbbFikWISL7EVBecnZe0rGq2f0uIM7yLZmC2Y4UkCB2lxtNOAbQM2r0dzWHKclp53iLStRK6te7ifBc4y/aIYjP/hBzavLfY3KxuVJnytKPu/ypP8UT0T1Uzqqm9JR3ZSO6qZ0VDdlo/opHdVN6Typbjzob11CCCGEEOLtKPkkhBBCCCFuQ8knIYQQQghxG0o+CSGEEEKI21DySQghhBBC3IaST0IIIYQQ4jaUfBJCCCGEELeh5JMQQgghhLgNJZ+EEEIIIcRtKPkkhBBCCCFuQ8knIYQQQghxG0o+CSGEEEKI21DySQghhBBC3IaST0IIIYQQ4jaUfBJCCCGEELeh5JMQQgghhLgNJZ+EEEIIIcRtKPkkhBBCCCFuQ8knIYQQQghxG0o+CSGEEEKI21DySQghhBBC3IaST0IIIYQQ4jaUfBJCCCGEELeh5JMQQgghhLgNJZ+EEEIIIcRtKPkkhBBCCCFuQ8knIYQQQghxG0o+CSGEEEKI21DySQghhBBC3IbJy8vjxQ6CEEIIIYT4BrrzSQghhBBC3IaST0IIIYQQ4jaUfBJCCCGEELeh5JMQQgghhLiNTyefN2/exJQpU9CtWzc8++yz+Pjjj5Gfn29ff/v2bbz//vvo3Lkz4uPj8csvv4gYrTh4nseoUaOwadMmQfm2bdvQrl07wc/48eNFilI8pdWP2WzGzJkzERMTg+7du2PlypUiRSi+5ORkp3Nl8ODBYoclGjo3SkfXFWdmsxkDBw7E4cOH7WX03VTIVd0sX77c6RyaN2+eiFG61+XLlzF27FjExMQgNjYWCxYsgMlkAgBcu3YNo0aNwlNPPYUXXngBBw4cEC1OqWiv7AGmTJkCq9WKxYsXw2q14rPPPsOMGTPw2WefAQA++ugj6PV6fPPNNzhx4gRmzZqFkJAQREVFiRy5e3Ach7lz5+LQoUOIiYkRrDt37hw6deqECRMm2MsUCoW7QxRVWfWzaNEiJCcnY/HixcjKysK0adNQp04ddOvWTaRoxZOZmYmIiAjMnTvXXiaV+u6lh86N0tF1RchkMmHKlCnIzMwUlPv6dxNQet2cO3cOAwYMwNChQ+1lKpXK3eGJwmKxYNy4cWjcuDGWLl2KW7du4eOPPwYAvPPOOxg/fjwaN26M7777Dvv378d7772HpKQk1K9f3+2x+uw3wI0bN/D3339j/fr1aNiwIQBg3LhxGD58OIxGI3JycrB//35s2LABDRo0QGhoKJKTk/Hjjz/6xAc8KysLU6dOxZUrV+Dn5+e0/ty5cwgNDUVQUJAI0YmvrPoxGAym3R7dAAAG/klEQVTYvHkz5s6di4iICERERCAhIQHr16/3yQTj3LlzaNKkic+eKyXRuVE2X7+ulJSZmYkpU6aA54WjIV6+fNmnv5uA0usGKE4+ffEcSktLw6VLl7B8+XKo1Wo0btwYb7zxBhYsWIAnnngCFy9eRGJiIjQaDZo0aYLDhw9jy5YtePPNN90eq88+dtdqtZg/fz4aNGggKOc4DmazGampqQgKChKsb9OmDVJSUtwdqihOnz6N+vXrY+XKldBqtU7rz507Z0/afVFZ9ZORkQGz2YzWrVvby9q0aYMTJ07AarW6O1TR+fq5UhKdG2Wjc6XYsWPH0L59eyxbtkxQ7uvfTUDpdcPzPC5cuICQkBCRIhNXw4YNsWDBAqjVansZwzCwWCxITU1FeHg4NBqNfV3r1q1FO2989s6nRqPBE088ISj74YcfEBoaCn9/f+Tm5jr95RQQEICsrCx3himajh07omPHji7XWSwWXL58GX/++ScSExPBcRxiYmIwfPhwyOVyN0cqjrLqJycnB/7+/oLHhQEBAbBYLMjLy/O5v8jPnTsHpVKJgQMHQqfT4fHHH8eoUaNc/lHj7ejcKB1dV4See+45l+W+/t0ElF43V69ehdFoxObNmzF58mQolUr07t0bgwcPBst6/722Bx98EO3atbMvcxyH9evXo02bNsjJyUFwcLBgezHPG69OPk0mU6kVGxAQIPgLYO3atdi9ezcWLVoEADAajU4XPJlMBovFAp7nwTBM9QXuBpWpG0cXL16EzWaDSqXCp59+iitXrmDu3LnQ6/WCtlo12f3Uj6tzp2jZbDZXXZAeory6unHjBpo1a4apU6fi9u3bWLBgAaZMmYL58+e7OVLx+dq5URm+cF2pCt7+3XQ/zp07BwAIDg7GvHnzcOrUKXtno5deeknM0ESxYMECnD59Gt999x3Wrl0LmUwmWC+Xy2GxWESJzauTz5MnT2L48OEu13344YeIjY0FAKxZswaLFi3C+PHj7X81yOVypy8Di8UChULhFR/uitaNK02bNsWOHTtQq1YtAEB4eDh4nsfkyZMxduxYr+hMcj/14+rcKVpWKpVVF6SHKK+udu/eDbVaDYlEAgCYOnUqhg4diuvXr6NOnTruDFV0vnZuVIYvXFeqgrd/N92PJ598UnAOhYaG4vbt21i/fr1PJZ88z2PevHn48ccfMWvWLDRt2hQKhQI6nU6wndlsFu2649Wf5jZt2giGYHAlMTERS5cuxbhx4/D888/by4ODg3Hz5k3Btq4ed9RUFambshR9uIs0atQIVqvVax4d3k/91K5dG/n5+bBYLPa/NHNzcyGXy+Hv71+VYXqEytZV48aNARR22vK15NPXzo3K8vbrSlXw9u+m++XqHMrJyREpGvfjOA4zZszAtm3bMHPmTDz99NMACs+bjIwMwbY3b95EYGCgGGH6bocjAEhKSsK3336LiRMnYsCAAYJ1rVq1QlZWFq5evWovO3bsGFq2bOnuMD3Onj170L17d8Ht+vT0dPj5+Yl2InuS8PBwyGQyJCcn28uOHz+O5s2b+9zdmxMnTqBTp07Izs62l50+fRoSicQnOwXQuVE6uq5UDH03lS4pKQmDBg0SlJ0+fdqnrjULFizA9u3b8dlnn6Fz58728pYtWyI9PR0Gg8FeJuZ547PJ5/Xr17F48WL069cPHTt2RE5Ojv3HZrOhfv366NChA6ZNm4aMjAz8/PPP2L59u+DuqK965JFHwPM8Zs6ciQsXLuDPP//EokWLkJCQ4POPfYDCx6c9e/bE7NmzkZaWhn379mH16tVOf+D4grCwMAQHB2PGjBk4e/Ysjh49ik8++QS9e/d2ukPhC+jcKB1dVyqGvptK99hjj+HSpUv48ssvcenSJWzbtg2rVq3CkCFDxA7NLVJSUpCUlIThw4cjIiJCkNe0bdsWderUwfTp03H27FmsWLECqamp6NOnjyixMnl5ec4DZfmAdevWYc6cOS7XFY2fdvPmTXzyySc4fPgwAgICMGLECPTo0cPNkYovPj4er7zyiuAkPX36NBYsWIATJ05Aq9Wib9++eO2113zyS8JV/RiNRsyaNQt79uyBRqPB4MGDfXZWnytXrmDevHn4999/IZFI0L17d4waNconezADdG6Uha4rrrVr1w6LFy+290mg76ZijnVz+PBhfPnll8jMzERgYCASEhLQv39/kaN0j4ULF2LNmjUu1x04cADXrl3DjBkzkJaWhvr162PMmDHo0KGDm6Ms5LPJJyGEEEIIcT+ffexOCCGEEELcj5JPQgghhBDiNpR8EkIIIYQQt6HkkxBCCCGEuA0ln4QQQgghxG0o+SSEEEIIIW5DySchhBBCCHEbSj4JIYQQQojbUPJJCCGEEELc5v8B2MubNJxVxU0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "np.random.seed(0)\n",
    "X = np.linspace(-5,5,num=20)\n",
    "X0 = X*np.random.rand(len(X))+15 # Create data cluster 1\n",
    "X1 = X*np.random.rand(len(X))-15 # Create data cluster 2\n",
    "X2 = X*np.random.rand(len(X)) # Create data cluster 3\n",
    "X_tot = np.stack((X0,X1,X2)).flatten() # Combine the clusters to get the random datapoints from above\n",
    "class GM1D:\n",
    "    def __init__(self,X,iterations):\n",
    "        self.iterations = iterations\n",
    "        self.X = X\n",
    "        self.mu = None\n",
    "        self.pi = None\n",
    "        self.var = None\n",
    "  \n",
    "    def run(self):\n",
    "        \n",
    "        \"\"\"\n",
    "        Instantiate the random mu, pi and var\n",
    "        \"\"\"\n",
    "        self.mu = [-8,8,5]\n",
    "        self.pi = [1/3,1/3,1/3]\n",
    "        self.var = [5,3,1]\n",
    "        \n",
    "        \n",
    "        \n",
    "        \"\"\"\n",
    "        E-Step\n",
    "        \"\"\"\n",
    "        \n",
    "        for iter in range(self.iterations):\n",
    "            \"\"\"Create the array r with dimensionality nxK\"\"\"\n",
    "            r = np.zeros((len(X_tot),3))  \n",
    "  \n",
    "            \"\"\"\n",
    "            Probability for each datapoint x_i to belong to gaussian g \n",
    "            \"\"\"\n",
    "            for c,g,p in zip(range(3),[norm(loc=self.mu[0],scale=self.var[0]),\n",
    "                                       norm(loc=self.mu[1],scale=self.var[1]),\n",
    "                                       norm(loc=self.mu[2],scale=self.var[2])],self.pi):\n",
    "                r[:,c] = p*g.pdf(X_tot) # Write the probability that x belongs to gaussian c in column c. \n",
    "                                      # Therewith we get a 60x3 array filled with the probability that each x_i belongs to one of the gaussians\n",
    "            \"\"\"\n",
    "            Normalize the probabilities such that each row of r sums to 1 and weight it by mu_c == the fraction of points belonging to \n",
    "            cluster c\n",
    "            \"\"\"\n",
    "            for i in range(len(r)):\n",
    "                r[i] = r[i]/(np.sum(pi)*np.sum(r,axis=1)[i])\n",
    "            \"\"\"Plot the data\"\"\"\n",
    "            fig = plt.figure(figsize=(10,10))\n",
    "            ax0 = fig.add_subplot(111)\n",
    "            for i in range(len(r)):\n",
    "                ax0.scatter(self.X[i],0,c=np.array([r[i][0],r[i][1],r[i][2]]),s=100) \n",
    "            \"\"\"Plot the gaussians\"\"\"\n",
    "            for g,c in zip([norm(loc=self.mu[0],scale=self.var[0]).pdf(np.linspace(-20,20,num=60)),\n",
    "                            norm(loc=self.mu[1],scale=self.var[1]).pdf(np.linspace(-20,20,num=60)),\n",
    "                            norm(loc=self.mu[2],scale=self.var[2]).pdf(np.linspace(-20,20,num=60))],['r','g','b']):\n",
    "                ax0.plot(np.linspace(-20,20,num=60),g,c=c)\n",
    "            \n",
    "            \n",
    "            \n",
    "            \"\"\"M-Step\"\"\"\n",
    "    \n",
    "            \"\"\"calculate m_c\"\"\"\n",
    "            m_c = []\n",
    "            for c in range(len(r[0])):\n",
    "                m = np.sum(r[:,c])\n",
    "                m_c.append(m) # For each cluster c, calculate the m_c and add it to the list m_c\n",
    "            \"\"\"calculate pi_c\"\"\"\n",
    "            for k in range(len(m_c)):\n",
    "                self.pi[k] = (m_c[k]/np.sum(m_c)) # For each cluster c, calculate the fraction of points pi_c which belongs to cluster c\n",
    "            \"\"\"calculate mu_c\"\"\"\n",
    "            self.mu = np.sum(self.X.reshape(len(self.X),1)*r,axis=0)/m_c\n",
    "            \"\"\"calculate var_c\"\"\"\n",
    "            var_c = []\n",
    "            for c in range(len(r[0])):\n",
    "                var_c.append((1/m_c[c])*np.dot(((np.array(r[:,c]).reshape(60,1))*(self.X.reshape(len(self.X),1)-self.mu[c])).T,(self.X.reshape(len(self.X),1)-self.mu[c])))\n",
    "            plt.show()\n",
    "            \n",
    "            \n",
    "                                     \n",
    "    \n",
    "\n",
    "GM1D = GM1D(X_tot,50)\n",
    "\n",
    "GM1D.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We uses E_M algorithm to maximize the M_L\n",
    "\n",
    "#Incorporate Convergence function:\n",
    "log_likelihoods = []\n",
    "log_likelihoods.append(np.log(np.sum([k*Data_T(mu[c],var[c]).pdf(X) for k,i,j in zip(self.pi,range(len(self.mu)),range(len(self.var)))])))\n",
    "\n",
    "            #________________________________________________________________________________________________________________________________            \n",
    "#\"\"Resolve this tomorrow morning\"\"\n",
    "    \n",
    "         #   #\"\"\"\"Incorporate Log-Likelihoodfunction:\"\"\"\"\n",
    "        log_likelihoods = []\n",
    "            for c in range(len(r[0])):\n",
    "                log_likelihoods.append(np.log(np.sum([k*X_T(mu.pdf(X_tot) for k,i,j in zip(self.pi,range(len(self.X)),range(len(self.X)))])))\n",
    "                log_likelihoods.append(np.log(np.sum([k*Data_T(mu[c],var[c]).pdf(Data_T) for k,i,j in zip(self.pi,range(len(self.X)),range(len(self.X)))])))\n",
    "log_likelihoods.append(np.log(np.sum([k*(self.mu[i],self.cov[j]).pdf(X) for k,i,j in zip(self.pi,range(len(self.mu)),range(len(self.cov)))])))\n",
    "            \n",
    "            \n",
    "            fig2 = plt.figure(figsize=(10,10))\n",
    "            ax1 = fig2.add_subplot(111) \n",
    "            ax1.set_title('Log-Likelihood')\n",
    "            ax1.plot(range(0,self.iterations,1),log_likelihoods)\"\"\"\"\"\"\"\"\"\n",
    "            #plt.show()\"\"\"\"\"\"''##  \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'\n",
    "                                                      \n",
    "            \n",
    "    def fit(self, tol=1e-4):\n",
    "        self._init()\n",
    "        num_iters = 0\n",
    "        ll = 1\n",
    "        previous_ll = 0\n",
    "        while(ll-previous_ll > tol):\n",
    "            previous_ll = self.loglikelihood()\n",
    "            self._fit()\n",
    "            num_iters += 1\n",
    "            ll = self.loglikelihood()\n",
    "            print('Iteration %d: log-likelihood is %.6f'%(num_iters, ll))\n",
    "        print('Terminate at %d-th iteration:log-likelihood is %.6f'%(num_iters, ll))\n",
    "    \n",
    "    def loglikelihood(self):\n",
    "        ll = 0\n",
    "        for i in range(self.m):\n",
    "            tmp = 0\n",
    "            for j in range(self.k):\n",
    "                #print(self.sigma_arr[j])\n",
    "                tmp += sp.stats.multivariate_normal.pdf(self.X[i, :], \n",
    "                                                        self.mu[c, :].A1, \n",
    "                                                        self.var[c, :]) *\\\n",
    "                       self.phi[j]\n",
    "            ll += np.log(tmp) \n",
    "        return ll      \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
